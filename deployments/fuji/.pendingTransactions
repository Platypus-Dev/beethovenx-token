{
  "0x271582d7be8f52b6b4785d2aacea0d4555f5e0422450bf27a69f63ca4b3d07d3": {
    "name": "MasterChefLpTokenTimelock",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "MasterChefLpTokenTimelock",
      "sourceName": "contracts/vesting/MasterChefLpTokenTimelock.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "releaseTime_",
              "type": "uint256"
            },
            {
              "internalType": "contract OfficialMasterChef",
              "name": "masterChef_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "masterChefPoolId_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "beneficiary",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "depositAllToMasterChef",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "harvest",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "masterChefPoolId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "release",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "releaseTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "token",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x6101006040523480156200001257600080fd5b5060405162000eb938038062000eb9833981016040819052620000359162000202565b428311620000a55760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206260448201527165666f72652063757272656e742074696d6560701b60648201526084015b60405180910390fd5b6040516306ed78b760e21b8152600481018290526001600160a01b038087169190841690631bb5e2dc9060240160206040518083038186803b158015620000eb57600080fd5b505afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001269190620001db565b6001600160a01b031614620001925760405162461bcd60e51b815260206004820152602b60248201527f50726f766964656420706f6f6c4964206e6f7420656c696769626c6520666f7260448201526a103a3434b9903a37b5b2b760a91b60648201526084016200009c565b606094851b6001600160601b03199081166080529390941b90921660a05260c052600080546001600160a01b0319166001600160a01b0390921691909117905560e05262000283565b600060208284031215620001ee57600080fd5b8151620001fb816200026a565b9392505050565b600080600080600060a086880312156200021b57600080fd5b855162000228816200026a565b60208701519095506200023b816200026a565b60408701516060880151919550935062000255816200026a565b80925050608086015190509295509295909350565b6001600160a01b03811681146200028057600080fd5b50565b60805160601c60a05160601c60c05160e051610b9d6200031c6000396000818160cd015281816101750152818161039a0152818161053901526105e2015260008181610118015261049701526000818160840152818161019601528181610604015261076301526000818161013e015281816102230152818161026b015281816103bc0152818161069101526107410152610b9d6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636e29a56b1161005b5780636e29a56b146100fb57806386d1a69f1461010e578063b91d400114610116578063fc0c546a1461013c57600080fd5b806338af3eed146100825780634641257d146100c15780636b4788a9146100cb575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100c9610162565b005b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016100b8565b6100c9610109366004610a96565b610216565b6100c9610495565b7f00000000000000000000000000000000000000000000000000000000000000006100ed565b7f00000000000000000000000000000000000000000000000000000000000000006100a4565b6000546001600160a01b03166318fccc767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b50505050565b61024b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461078d565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156102b957600080fd5b505afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f19190610aaf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610a74565b506000546040516370a0823160e01b81523060048201526001600160a01b0391821691638dbdbe6d917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610aaf565b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152606401600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210156105255760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60008054604080516393f1a40b60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152306024820152815184936001600160a01b0316926393f1a40b9260448082019391829003018186803b15801561059257600080fd5b505afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610ac8565b60005491935091506001600160a01b031663d1abb9077f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b03166044820152606401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505060006106b37f000000000000000000000000000000000000000000000000000000000000000090565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190610aaf565b90508015610788576107886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836107f8565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610828565b6040516001600160a01b03831660248201526044810182905261078890849063a9059cbb60e01b906064016107c1565b600061087d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108fa9092919063ffffffff16565b805190915015610788578080602001905181019061089b9190610a74565b6107885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051c565b60606109098484600085610913565b90505b9392505050565b6060824710156109745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051c565b843b6109c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051c565b600080866001600160a01b031685876040516109de9190610aec565b60006040518083038185875af1925050503d8060008114610a1b576040519150601f19603f3d011682016040523d82523d6000602084013e610a20565b606091505b5091509150610a30828286610a3b565b979650505050505050565b60608315610a4a57508161090c565b825115610a5a5782518084602001fd5b8160405162461bcd60e51b815260040161051c9190610b08565b600060208284031215610a8657600080fd5b8151801515811461090c57600080fd5b600060208284031215610aa857600080fd5b5035919050565b600060208284031215610ac157600080fd5b5051919050565b60008060408385031215610adb57600080fd5b505080516020909101519092909150565b60008251610afe818460208701610b3b565b9190910192915050565b6020815260008251806020840152610b27816040850160208701610b3b565b601f01601f19169190910160400192915050565b60005b83811015610b56578181015183820152602001610b3e565b83811115610210575050600091015256fea26469706673582212200d37a172cac16c4ceb7241cf570216ec19b842dddd059b96324bb33b8a1ad9cf64736f6c63430008070033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80636e29a56b1161005b5780636e29a56b146100fb57806386d1a69f1461010e578063b91d400114610116578063fc0c546a1461013c57600080fd5b806338af3eed146100825780634641257d146100c15780636b4788a9146100cb575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100c9610162565b005b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016100b8565b6100c9610109366004610a96565b610216565b6100c9610495565b7f00000000000000000000000000000000000000000000000000000000000000006100ed565b7f00000000000000000000000000000000000000000000000000000000000000006100a4565b6000546001600160a01b03166318fccc767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b50505050565b61024b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461078d565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156102b957600080fd5b505afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f19190610aaf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610a74565b506000546040516370a0823160e01b81523060048201526001600160a01b0391821691638dbdbe6d917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610aaf565b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152606401600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210156105255760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60008054604080516393f1a40b60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152306024820152815184936001600160a01b0316926393f1a40b9260448082019391829003018186803b15801561059257600080fd5b505afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610ac8565b60005491935091506001600160a01b031663d1abb9077f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b03166044820152606401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505060006106b37f000000000000000000000000000000000000000000000000000000000000000090565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190610aaf565b90508015610788576107886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836107f8565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610828565b6040516001600160a01b03831660248201526044810182905261078890849063a9059cbb60e01b906064016107c1565b600061087d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108fa9092919063ffffffff16565b805190915015610788578080602001905181019061089b9190610a74565b6107885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051c565b60606109098484600085610913565b90505b9392505050565b6060824710156109745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051c565b843b6109c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051c565b600080866001600160a01b031685876040516109de9190610aec565b60006040518083038185875af1925050503d8060008114610a1b576040519150601f19603f3d011682016040523d82523d6000602084013e610a20565b606091505b5091509150610a30828286610a3b565b979650505050505050565b60608315610a4a57508161090c565b825115610a5a5782518084602001fd5b8160405162461bcd60e51b815260040161051c9190610b08565b600060208284031215610a8657600080fd5b8151801515811461090c57600080fd5b600060208284031215610aa857600080fd5b5035919050565b600060208284031215610ac157600080fd5b5051919050565b60008060408385031215610adb57600080fd5b505080516020909101519092909150565b60008251610afe818460208701610b3b565b9190910192915050565b6020815260008251806020840152610b27816040850160208701610b3b565b601f01601f19169190910160400192915050565b60005b83811015610b56578181015183820152602001610b3e565b83811115610210575050600091015256fea26469706673582212200d37a172cac16c4ceb7241cf570216ec19b842dddd059b96324bb33b8a1ad9cf64736f6c63430008070033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "details": "A token holder contract that will allow a beneficiary to extract the tokens after a given release time. Useful for simple vesting schedules like \"advisors get all of their tokens after 1 year\".",
        "kind": "dev",
        "methods": {
          "beneficiary()": {
            "returns": {
              "_0": "the beneficiary of the tokens."
            }
          },
          "releaseTime()": {
            "returns": {
              "_0": "the time when the tokens are released."
            }
          },
          "token()": {
            "returns": {
              "_0": "the token being held."
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_4191": {
              "entryPoint": null,
              "id": 4191,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_contract$_IERC20_$727_fromMemory": {
              "entryPoint": 475,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IERC20_$727t_addresst_uint256t_contract$_OfficialMasterChef_$4075t_uint256_fromMemory": {
              "entryPoint": 514,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_encode_tuple_t_stringliteral_3a1b011db679312275bde152bb0f647f52ec734e394a58e1046b7d2042f86a70__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e1658b776de3735ba90dc86438c12854f3617d6d488d64009fdab5928e27c313__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "validator_revert_address": {
              "entryPoint": 618,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:2119:18",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:18",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "109:170:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "155:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "164:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "167:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "157:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "157:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "157:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "130:7:18"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "139:9:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "126:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "126:23:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "151:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "122:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "122:32:18"
                          },
                          "nodeType": "YulIf",
                          "src": "119:52:18"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "180:29:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "199:9:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "193:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "193:16:18"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "184:5:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "243:5:18"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "218:24:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "218:31:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "218:31:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "258:15:18",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "268:5:18"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "258:6:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20_$727_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "75:9:18",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "86:7:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "98:6:18",
                        "type": ""
                      }
                    ],
                    "src": "14:265:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "474:494:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "521:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "530:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "533:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "523:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "523:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "523:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "495:7:18"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "504:9:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "491:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "491:23:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "516:3:18",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "487:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "487:33:18"
                          },
                          "nodeType": "YulIf",
                          "src": "484:53:18"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "546:29:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "565:9:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "559:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "559:16:18"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "550:5:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "609:5:18"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "584:24:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "584:31:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "584:31:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "624:15:18",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "634:5:18"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "624:6:18"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "648:40:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "673:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "684:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "669:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "669:18:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "663:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "663:25:18"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "652:7:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "722:7:18"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "697:24:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "697:33:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "697:33:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "739:17:18",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "749:7:18"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "739:6:18"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "765:35:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "785:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "796:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "781:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "781:18:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "775:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "775:25:18"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "765:6:18"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "809:40:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "834:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "845:2:18",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "830:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "830:18:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "824:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "824:25:18"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "813:7:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "883:7:18"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "858:24:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "858:33:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "858:33:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "900:17:18",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "910:7:18"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "900:6:18"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "926:36:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "946:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "957:3:18",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "942:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "942:19:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "936:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "936:26:18"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "926:6:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20_$727t_addresst_uint256t_contract$_OfficialMasterChef_$4075t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "408:9:18",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "419:7:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "431:6:18",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "439:6:18",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "447:6:18",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "455:6:18",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "463:6:18",
                        "type": ""
                      }
                    ],
                    "src": "284:684:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1147:233:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1164:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1175:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1157:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1157:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1157:21:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1198:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1209:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1194:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1194:18:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1214:2:18",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1187:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1187:30:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1187:30:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1237:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1248:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1233:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1233:18:18"
                              },
                              {
                                "hexValue": "50726f766964656420706f6f6c4964206e6f7420656c696769626c6520666f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1253:34:18",
                                "type": "",
                                "value": "Provided poolId not eligible for"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1226:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1226:62:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1226:62:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1308:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1319:2:18",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1304:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1304:18:18"
                              },
                              {
                                "hexValue": "207468697320746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1324:13:18",
                                "type": "",
                                "value": " this token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1297:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1297:41:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1297:41:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1347:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1359:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1370:3:18",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1355:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1355:19:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1347:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3a1b011db679312275bde152bb0f647f52ec734e394a58e1046b7d2042f86a70__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1124:9:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1138:4:18",
                        "type": ""
                      }
                    ],
                    "src": "973:407:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1559:240:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1576:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1587:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1569:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1569:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1569:21:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1610:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1621:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1606:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1606:18:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1626:2:18",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1599:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1599:30:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1599:30:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1649:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1660:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1645:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1645:18:18"
                              },
                              {
                                "hexValue": "546f6b656e54696d656c6f636b3a2072656c656173652074696d652069732062",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1665:34:18",
                                "type": "",
                                "value": "TokenTimelock: release time is b"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1638:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1638:62:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1638:62:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1720:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1731:2:18",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1716:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1716:18:18"
                              },
                              {
                                "hexValue": "65666f72652063757272656e742074696d65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1736:20:18",
                                "type": "",
                                "value": "efore current time"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1709:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1709:48:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1709:48:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1766:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1778:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1789:3:18",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1774:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1774:19:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1766:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e1658b776de3735ba90dc86438c12854f3617d6d488d64009fdab5928e27c313__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1536:9:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1550:4:18",
                        "type": ""
                      }
                    ],
                    "src": "1385:414:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1905:76:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1915:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1927:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1938:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1923:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1923:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1915:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1957:9:18"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1968:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1950:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1950:25:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1950:25:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1874:9:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1885:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1896:4:18",
                        "type": ""
                      }
                    ],
                    "src": "1804:177:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2031:86:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2095:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2104:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2107:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2097:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2097:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2097:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2054:5:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2065:5:18"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2080:3:18",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2085:1:18",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2076:3:18"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2076:11:18"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2089:1:18",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "2072:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2072:19:18"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2061:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2061:31:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2051:2:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2051:42:18"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2044:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2044:50:18"
                          },
                          "nodeType": "YulIf",
                          "src": "2041:70:18"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2020:5:18",
                        "type": ""
                      }
                    ],
                    "src": "1986:131:18"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IERC20_$727_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$727t_addresst_uint256t_contract$_OfficialMasterChef_$4075t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n        let value_2 := mload(add(headStart, 96))\n        validator_revert_address(value_2)\n        value3 := value_2\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_3a1b011db679312275bde152bb0f647f52ec734e394a58e1046b7d2042f86a70__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Provided poolId not eligible for\")\n        mstore(add(headStart, 96), \" this token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e1658b776de3735ba90dc86438c12854f3617d6d488d64009fdab5928e27c313__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"TokenTimelock: release time is b\")\n        mstore(add(headStart, 96), \"efore current time\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
              "id": 18,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "6101006040523480156200001257600080fd5b5060405162000eb938038062000eb9833981016040819052620000359162000202565b428311620000a55760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206260448201527165666f72652063757272656e742074696d6560701b60648201526084015b60405180910390fd5b6040516306ed78b760e21b8152600481018290526001600160a01b038087169190841690631bb5e2dc9060240160206040518083038186803b158015620000eb57600080fd5b505afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001269190620001db565b6001600160a01b031614620001925760405162461bcd60e51b815260206004820152602b60248201527f50726f766964656420706f6f6c4964206e6f7420656c696769626c6520666f7260448201526a103a3434b9903a37b5b2b760a91b60648201526084016200009c565b606094851b6001600160601b03199081166080529390941b90921660a05260c052600080546001600160a01b0319166001600160a01b0390921691909117905560e05262000283565b600060208284031215620001ee57600080fd5b8151620001fb816200026a565b9392505050565b600080600080600060a086880312156200021b57600080fd5b855162000228816200026a565b60208701519095506200023b816200026a565b60408701516060880151919550935062000255816200026a565b80925050608086015190509295509295909350565b6001600160a01b03811681146200028057600080fd5b50565b60805160601c60a05160601c60c05160e051610b9d6200031c6000396000818160cd015281816101750152818161039a0152818161053901526105e2015260008181610118015261049701526000818160840152818161019601528181610604015261076301526000818161013e015281816102230152818161026b015281816103bc0152818161069101526107410152610b9d6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636e29a56b1161005b5780636e29a56b146100fb57806386d1a69f1461010e578063b91d400114610116578063fc0c546a1461013c57600080fd5b806338af3eed146100825780634641257d146100c15780636b4788a9146100cb575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100c9610162565b005b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016100b8565b6100c9610109366004610a96565b610216565b6100c9610495565b7f00000000000000000000000000000000000000000000000000000000000000006100ed565b7f00000000000000000000000000000000000000000000000000000000000000006100a4565b6000546001600160a01b03166318fccc767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b50505050565b61024b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461078d565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156102b957600080fd5b505afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f19190610aaf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610a74565b506000546040516370a0823160e01b81523060048201526001600160a01b0391821691638dbdbe6d917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610aaf565b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152606401600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210156105255760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60008054604080516393f1a40b60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152306024820152815184936001600160a01b0316926393f1a40b9260448082019391829003018186803b15801561059257600080fd5b505afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610ac8565b60005491935091506001600160a01b031663d1abb9077f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b03166044820152606401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505060006106b37f000000000000000000000000000000000000000000000000000000000000000090565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190610aaf565b90508015610788576107886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836107f8565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610828565b6040516001600160a01b03831660248201526044810182905261078890849063a9059cbb60e01b906064016107c1565b600061087d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108fa9092919063ffffffff16565b805190915015610788578080602001905181019061089b9190610a74565b6107885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051c565b60606109098484600085610913565b90505b9392505050565b6060824710156109745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051c565b843b6109c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051c565b600080866001600160a01b031685876040516109de9190610aec565b60006040518083038185875af1925050503d8060008114610a1b576040519150601f19603f3d011682016040523d82523d6000602084013e610a20565b606091505b5091509150610a30828286610a3b565b979650505050505050565b60608315610a4a57508161090c565b825115610a5a5782518084602001fd5b8160405162461bcd60e51b815260040161051c9190610b08565b600060208284031215610a8657600080fd5b8151801515811461090c57600080fd5b600060208284031215610aa857600080fd5b5035919050565b600060208284031215610ac157600080fd5b5051919050565b60008060408385031215610adb57600080fd5b505080516020909101519092909150565b60008251610afe818460208701610b3b565b9190910192915050565b6020815260008251806020840152610b27816040850160208701610b3b565b601f01601f19169190910160400192915050565b60005b83811015610b56578181015183820152602001610b3e565b83811115610210575050600091015256fea26469706673582212200d37a172cac16c4ceb7241cf570216ec19b842dddd059b96324bb33b8a1ad9cf64736f6c63430008070033",
          "opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xEB9 CODESIZE SUB DUP1 PUSH3 0xEB9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x202 JUMP JUMPDEST TIMESTAMP DUP4 GT PUSH3 0xA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E54696D656C6F636B3A2072656C656173652074696D652069732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x65666F72652063757272656E742074696D65 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6ED78B7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x1BB5E2DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x126 SWAP2 SWAP1 PUSH3 0x1DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x192 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F766964656420706F6F6C4964206E6F7420656C696769626C6520666F72 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x103A3434B9903A37B5B2B7 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x9C JUMP JUMPDEST PUSH1 0x60 SWAP5 DUP6 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x80 MSTORE SWAP4 SWAP1 SWAP5 SHL SWAP1 SWAP3 AND PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xE0 MSTORE PUSH3 0x283 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1FB DUP2 PUSH3 0x26A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x228 DUP2 PUSH3 0x26A JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x23B DUP2 PUSH3 0x26A JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD SWAP2 SWAP6 POP SWAP4 POP PUSH3 0x255 DUP2 PUSH3 0x26A JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0xB9D PUSH3 0x31C PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xCD ADD MSTORE DUP2 DUP2 PUSH2 0x175 ADD MSTORE DUP2 DUP2 PUSH2 0x39A ADD MSTORE DUP2 DUP2 PUSH2 0x539 ADD MSTORE PUSH2 0x5E2 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x118 ADD MSTORE PUSH2 0x497 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0x84 ADD MSTORE DUP2 DUP2 PUSH2 0x196 ADD MSTORE DUP2 DUP2 PUSH2 0x604 ADD MSTORE PUSH2 0x763 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x13E ADD MSTORE DUP2 DUP2 PUSH2 0x223 ADD MSTORE DUP2 DUP2 PUSH2 0x26B ADD MSTORE DUP2 DUP2 PUSH2 0x3BC ADD MSTORE DUP2 DUP2 PUSH2 0x691 ADD MSTORE PUSH2 0x741 ADD MSTORE PUSH2 0xB9D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E29A56B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6E29A56B EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x86D1A69F EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0xB91D4001 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38AF3EED EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x6B4788A9 EQ PUSH2 0xCB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x162 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0xA96 JUMP JUMPDEST PUSH2 0x216 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x495 JUMP JUMPDEST PUSH32 0x0 PUSH2 0xED JUMP JUMPDEST PUSH32 0x0 PUSH2 0xA4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18FCCC76 PUSH32 0x0 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x210 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x24B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS DUP5 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 SWAP2 AND SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F1 SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F SWAP2 SWAP1 PUSH2 0xA74 JUMP JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 PUSH4 0x8DBDBE6D SWAP2 PUSH32 0x0 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x436 SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 TIMESTAMP LT ISZERO PUSH2 0x525 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E54696D656C6F636B3A2063757272656E742074696D652069732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x65666F72652072656C656173652074696D65 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x93F1A40B PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP2 MLOAD DUP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x93F1A40B SWAP3 PUSH1 0x44 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5CA SWAP2 SWAP1 PUSH2 0xAC8 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD1ABB907 PUSH32 0x0 DUP5 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x686 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x6B3 PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x708 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x72C SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x788 JUMPI PUSH2 0x788 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH32 0x0 DUP4 PUSH2 0x7F8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x210 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x828 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x788 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x7C1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x788 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x89B SWAP2 SWAP1 PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x788 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x909 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x913 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51C JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x9C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA1B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA20 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xA30 DUP3 DUP3 DUP7 PUSH2 0xA3B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xA4A JUMPI POP DUP2 PUSH2 0x90C JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xA5A JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x90C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xADB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAFE DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xB3B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB27 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB56 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB3E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x210 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD CALLDATACOPY LOG1 PUSH19 0xCAC16C4CEB7241CF570216EC19B842DDDD059B SWAP7 ORIGIN 0x4B 0xB3 EXTCODESIZE DUP11 BYTE 0xD9 0xCF PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
          "sourceMap": "717:3016:17:-:0;;;1159:650;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1381:15;1366:12;:30;1345:127;;;;-1:-1:-1;;;1345:127:17;;1587:2:18;1345:127:17;;;1569:21:18;1626:2;1606:18;;;1599:30;1665:34;1645:18;;;1638:62;-1:-1:-1;;;1716:18:18;;;1709:48;1774:19;;1345:127:17;;;;;;;;;1503:39;;-1:-1:-1;;;1503:39:17;;;;;1950:25:18;;;-1:-1:-1;;;;;1503:49:17;;;;:20;;;;;;1923:18:18;;1503:39:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1503:49:17;;1482:139;;;;-1:-1:-1;;;1482:139:17;;1175:2:18;1482:139:17;;;1157:21:18;1214:2;1194:18;;;1187:30;1253:34;1233:18;;;1226:62;-1:-1:-1;;;1304:18:18;;;1297:41;1355:19;;1482:139:17;973:407:18;1482:139:17;1631:15;;;;-1:-1:-1;;;;;;1631:15:17;;;;;1656:27;;;;;;;;;1693;;1730:11;:25;;-1:-1:-1;;;;;;1730:25:17;-1:-1:-1;;;;;1730:25:17;;;;;;;;;1765:37;;717:3016;;14:265:18;98:6;151:2;139:9;130:7;126:23;122:32;119:52;;;167:1;164;157:12;119:52;199:9;193:16;218:31;243:5;218:31;:::i;:::-;268:5;14:265;-1:-1:-1;;;14:265:18:o;284:684::-;431:6;439;447;455;463;516:3;504:9;495:7;491:23;487:33;484:53;;;533:1;530;523:12;484:53;565:9;559:16;584:31;609:5;584:31;:::i;:::-;684:2;669:18;;663:25;634:5;;-1:-1:-1;697:33:18;663:25;697:33;:::i;:::-;796:2;781:18;;775:25;845:2;830:18;;824:25;749:7;;-1:-1:-1;775:25:18;-1:-1:-1;858:33:18;824:25;858:33;:::i;:::-;910:7;900:17;;;957:3;946:9;942:19;936:26;926:36;;284:684;;;;;;;;:::o;1986:131::-;-1:-1:-1;;;;;2061:31:18;;2051:42;;2041:70;;2107:1;2104;2097:12;2041:70;1986:131;:::o;:::-;717:3016:17;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_callOptionalReturn_975": {
              "entryPoint": 2088,
              "id": 975,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@beneficiary_4210": {
              "entryPoint": null,
              "id": 4210,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@depositAllToMasterChef_4341": {
              "entryPoint": 534,
              "id": 4341,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@functionCallWithValue_1137": {
              "entryPoint": 2323,
              "id": 1137,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@functionCall_1067": {
              "entryPoint": 2298,
              "id": 1067,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@harvest_4354": {
              "entryPoint": 354,
              "id": 4354,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@isContract_996": {
              "entryPoint": null,
              "id": 996,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@masterChefPoolId_4289": {
              "entryPoint": null,
              "id": 4289,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@releaseTime_4219": {
              "entryPoint": null,
              "id": 4219,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@release_4281": {
              "entryPoint": 1173,
              "id": 4281,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@safeTransferFrom_809": {
              "entryPoint": 1933,
              "id": 809,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@safeTransfer_783": {
              "entryPoint": 2040,
              "id": 783,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@token_4201": {
              "entryPoint": null,
              "id": 4201,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@verifyCallResult_1272": {
              "entryPoint": 2619,
              "id": 1272,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 2676,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 2710,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 2735,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_uint256_fromMemory": {
              "entryPoint": 2760,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 2796,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IERC20_$727__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 2824,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0345c6084b4d4be2f1249aa1f58ddc5a11b524aacb744b63dfad68c56d61fad0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 2875,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:5342:18",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:18",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "92:199:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "138:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "147:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "150:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "140:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "140:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "140:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "113:7:18"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "122:9:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "109:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "109:23:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "134:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "105:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "105:32:18"
                          },
                          "nodeType": "YulIf",
                          "src": "102:52:18"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "163:29:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "182:9:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "176:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "176:16:18"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "167:5:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "245:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "254:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "257:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "247:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "247:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "247:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "214:5:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "235:5:18"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "228:6:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "228:13:18"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "221:6:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "221:21:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "211:2:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "211:32:18"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "204:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "204:40:18"
                          },
                          "nodeType": "YulIf",
                          "src": "201:60:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "270:15:18",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "280:5:18"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "270:6:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "58:9:18",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "69:7:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "81:6:18",
                        "type": ""
                      }
                    ],
                    "src": "14:277:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "366:110:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "412:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "421:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "424:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "414:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "414:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "414:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "387:7:18"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "396:9:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "383:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "383:23:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "408:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "379:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "379:32:18"
                          },
                          "nodeType": "YulIf",
                          "src": "376:52:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "437:33:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "460:9:18"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "447:12:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "447:23:18"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "437:6:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "332:9:18",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "343:7:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "355:6:18",
                        "type": ""
                      }
                    ],
                    "src": "296:180:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "562:103:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "608:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "617:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "620:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "610:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "610:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "610:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "583:7:18"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "592:9:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "579:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "579:23:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "604:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "575:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "575:32:18"
                          },
                          "nodeType": "YulIf",
                          "src": "572:52:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "633:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "649:9:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "643:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "643:16:18"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "633:6:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "528:9:18",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "539:7:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "551:6:18",
                        "type": ""
                      }
                    ],
                    "src": "481:184:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "768:147:18",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "814:16:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "823:1:18",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "826:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "816:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "816:12:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "816:12:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "789:7:18"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "798:9:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "785:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "785:23:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "810:2:18",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "781:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "781:32:18"
                          },
                          "nodeType": "YulIf",
                          "src": "778:52:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "839:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "855:9:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "849:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "849:16:18"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "839:6:18"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "874:35:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "894:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "905:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "890:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "890:18:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "884:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "884:25:18"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "874:6:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "726:9:18",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "737:7:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "749:6:18",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "757:6:18",
                        "type": ""
                      }
                    ],
                    "src": "670:245:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1057:137:18",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1067:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1087:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1081:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1081:13:18"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1071:6:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1129:6:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1137:4:18",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1125:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1125:17:18"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1144:3:18"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1149:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1103:21:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1103:53:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1103:53:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1165:23:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1176:3:18"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1181:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1172:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1172:16:18"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1165:3:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1033:3:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1038:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1049:3:18",
                        "type": ""
                      }
                    ],
                    "src": "920:274:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1300:102:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1310:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1322:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1333:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1318:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1318:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1310:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1352:9:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1367:6:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1383:3:18",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1388:1:18",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1379:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1379:11:18"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1392:1:18",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1375:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1375:19:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1363:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1363:32:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1345:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1345:51:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1345:51:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1269:9:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1280:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1291:4:18",
                        "type": ""
                      }
                    ],
                    "src": "1199:203:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1564:218:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1574:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1586:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1597:2:18",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1582:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1582:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1574:4:18"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1609:29:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1627:3:18",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1632:1:18",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1623:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1623:11:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1636:1:18",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1619:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1619:19:18"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1613:2:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1654:9:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1669:6:18"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1677:2:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1665:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1665:15:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1647:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1647:34:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1647:34:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1701:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1712:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1697:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1697:18:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1721:6:18"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1729:2:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1717:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1717:15:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1690:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1690:43:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1690:43:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1753:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1764:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1749:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1749:18:18"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "1769:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1742:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1742:34:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1742:34:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1517:9:18",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1528:6:18",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1536:6:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1544:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1555:4:18",
                        "type": ""
                      }
                    ],
                    "src": "1407:375:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1916:145:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1926:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1938:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1949:2:18",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1934:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1934:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1926:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1968:9:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1983:6:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1999:3:18",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2004:1:18",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1995:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1995:11:18"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2008:1:18",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1991:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1991:19:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1979:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1979:32:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1961:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1961:51:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1961:51:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2032:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2043:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2028:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2028:18:18"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2048:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2021:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2021:34:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2021:34:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1877:9:18",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1888:6:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1896:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1907:4:18",
                        "type": ""
                      }
                    ],
                    "src": "1787:274:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2181:102:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2191:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2203:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2214:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2199:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2199:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2191:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2233:9:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2248:6:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2264:3:18",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2269:1:18",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "2260:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2260:11:18"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2273:1:18",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2256:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2256:19:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2244:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2244:32:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2226:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2226:51:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2226:51:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC20_$727__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2150:9:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2161:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2172:4:18",
                        "type": ""
                      }
                    ],
                    "src": "2066:217:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2409:262:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2426:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2437:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2419:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2419:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2419:21:18"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2449:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2469:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2463:5:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2463:13:18"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2453:6:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2496:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2507:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2492:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2492:18:18"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2512:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2485:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2485:34:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2485:34:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2554:6:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2562:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2550:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2550:15:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2571:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2582:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2567:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2567:18:18"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2587:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2528:21:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2528:66:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2528:66:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2603:62:18",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2619:9:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "2638:6:18"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2646:2:18",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2634:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2634:15:18"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2655:2:18",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2651:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2651:7:18"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2630:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2630:29:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2615:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2615:45:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2662:2:18",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2611:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2611:54:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2603:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2378:9:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2389:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2400:4:18",
                        "type": ""
                      }
                    ],
                    "src": "2288:383:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2850:240:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2867:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2878:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2860:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2860:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2860:21:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2901:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2912:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2897:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2897:18:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2917:2:18",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2890:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2890:30:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2890:30:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2940:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2951:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2936:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2936:18:18"
                              },
                              {
                                "hexValue": "546f6b656e54696d656c6f636b3a2063757272656e742074696d652069732062",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2956:34:18",
                                "type": "",
                                "value": "TokenTimelock: current time is b"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2929:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2929:62:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2929:62:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3011:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3022:2:18",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3007:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3007:18:18"
                              },
                              {
                                "hexValue": "65666f72652072656c656173652074696d65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3027:20:18",
                                "type": "",
                                "value": "efore release time"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3000:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3000:48:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3000:48:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3057:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3069:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3080:3:18",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3065:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3065:19:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3057:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0345c6084b4d4be2f1249aa1f58ddc5a11b524aacb744b63dfad68c56d61fad0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2827:9:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2841:4:18",
                        "type": ""
                      }
                    ],
                    "src": "2676:414:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3269:228:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3286:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3297:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3279:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3279:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3279:21:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3320:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3331:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3316:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3316:18:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3336:2:18",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3309:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3309:30:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3309:30:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3359:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3370:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3355:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3355:18:18"
                              },
                              {
                                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3375:34:18",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3348:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3348:62:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3348:62:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3430:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3441:2:18",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3426:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3426:18:18"
                              },
                              {
                                "hexValue": "722063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3446:8:18",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3419:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3419:36:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3419:36:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3464:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3476:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3487:3:18",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3472:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3472:19:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3464:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3246:9:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3260:4:18",
                        "type": ""
                      }
                    ],
                    "src": "3095:402:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3676:179:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3693:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3704:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3686:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3686:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3686:21:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3727:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3738:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3723:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3723:18:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3743:2:18",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3716:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3716:30:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3716:30:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3766:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3777:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3762:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3762:18:18"
                              },
                              {
                                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3782:31:18",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3755:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3755:59:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3755:59:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3823:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3835:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3846:2:18",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3831:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3831:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3823:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3653:9:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3667:4:18",
                        "type": ""
                      }
                    ],
                    "src": "3502:353:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4034:232:18",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4051:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4062:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4044:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4044:21:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4044:21:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4085:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4096:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4081:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4081:18:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4101:2:18",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4074:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4074:30:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4074:30:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4124:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4135:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4120:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4120:18:18"
                              },
                              {
                                "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4140:34:18",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4113:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4113:62:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4113:62:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4195:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4206:2:18",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4191:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4191:18:18"
                              },
                              {
                                "hexValue": "6f742073756363656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4211:12:18",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4184:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4184:40:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4184:40:18"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4233:27:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4245:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4256:3:18",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4241:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4241:19:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4233:4:18"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4011:9:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4025:4:18",
                        "type": ""
                      }
                    ],
                    "src": "3860:406:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4372:76:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4382:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4394:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4405:2:18",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4390:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4390:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4382:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4424:9:18"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4435:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4417:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4417:25:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4417:25:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4341:9:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4352:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4363:4:18",
                        "type": ""
                      }
                    ],
                    "src": "4271:177:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4582:145:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4592:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4604:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4615:2:18",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4600:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4600:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4592:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4634:9:18"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4645:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4627:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4627:25:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4627:25:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4672:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4683:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4668:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4668:18:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4692:6:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4708:3:18",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4713:1:18",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "4704:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4704:11:18"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4717:1:18",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4700:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4700:19:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4688:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4688:32:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4661:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4661:60:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4661:60:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4543:9:18",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4554:6:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4562:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4573:4:18",
                        "type": ""
                      }
                    ],
                    "src": "4453:274:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4889:188:18",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4899:26:18",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4911:9:18"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4922:2:18",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4907:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4907:18:18"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4899:4:18"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4941:9:18"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4952:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4934:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4934:25:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4934:25:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4979:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4990:2:18",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4975:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4975:18:18"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4995:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4968:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4968:34:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4968:34:18"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5022:9:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5033:2:18",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5018:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5018:18:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "5042:6:18"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5058:3:18",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5063:1:18",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "5054:3:18"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5054:11:18"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5067:1:18",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5050:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5050:19:18"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5038:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5038:32:18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5011:6:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5011:60:18"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5011:60:18"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4842:9:18",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4853:6:18",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4861:6:18",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4869:6:18",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4880:4:18",
                        "type": ""
                      }
                    ],
                    "src": "4732:345:18"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5135:205:18",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5145:10:18",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5154:1:18",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5149:1:18",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5214:63:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "5239:3:18"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "5244:1:18"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5235:3:18"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5235:11:18"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "5258:3:18"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5263:1:18"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5254:3:18"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5254:11:18"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5248:5:18"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5248:18:18"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5228:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5228:39:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5228:39:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5175:1:18"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5178:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5172:2:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5172:13:18"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5186:19:18",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5188:15:18",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5197:1:18"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5200:2:18",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5193:3:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5193:10:18"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5188:1:18"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5168:3:18",
                            "statements": []
                          },
                          "src": "5164:113:18"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5303:31:18",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "5316:3:18"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5321:6:18"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5312:3:18"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5312:16:18"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5330:1:18",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5305:6:18"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5305:27:18"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5305:27:18"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5292:1:18"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5295:6:18"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5289:2:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5289:13:18"
                          },
                          "nodeType": "YulIf",
                          "src": "5286:48:18"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "5113:3:18",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "5118:3:18",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "5123:6:18",
                        "type": ""
                      }
                    ],
                    "src": "5082:258:18"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0345c6084b4d4be2f1249aa1f58ddc5a11b524aacb744b63dfad68c56d61fad0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"TokenTimelock: current time is b\")\n        mstore(add(headStart, 96), \"efore release time\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n}",
              "id": 18,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "4128": [
              {
                "length": 32,
                "start": 318
              },
              {
                "length": 32,
                "start": 547
              },
              {
                "length": 32,
                "start": 619
              },
              {
                "length": 32,
                "start": 956
              },
              {
                "length": 32,
                "start": 1681
              },
              {
                "length": 32,
                "start": 1857
              }
            ],
            "4130": [
              {
                "length": 32,
                "start": 132
              },
              {
                "length": 32,
                "start": 406
              },
              {
                "length": 32,
                "start": 1540
              },
              {
                "length": 32,
                "start": 1891
              }
            ],
            "4132": [
              {
                "length": 32,
                "start": 280
              },
              {
                "length": 32,
                "start": 1175
              }
            ],
            "4137": [
              {
                "length": 32,
                "start": 205
              },
              {
                "length": 32,
                "start": 373
              },
              {
                "length": 32,
                "start": 922
              },
              {
                "length": 32,
                "start": 1337
              },
              {
                "length": 32,
                "start": 1506
              }
            ]
          },
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061007d5760003560e01c80636e29a56b1161005b5780636e29a56b146100fb57806386d1a69f1461010e578063b91d400114610116578063fc0c546a1461013c57600080fd5b806338af3eed146100825780634641257d146100c15780636b4788a9146100cb575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100c9610162565b005b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016100b8565b6100c9610109366004610a96565b610216565b6100c9610495565b7f00000000000000000000000000000000000000000000000000000000000000006100ed565b7f00000000000000000000000000000000000000000000000000000000000000006100a4565b6000546001600160a01b03166318fccc767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b50505050565b61024b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461078d565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156102b957600080fd5b505afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f19190610aaf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610a74565b506000546040516370a0823160e01b81523060048201526001600160a01b0391821691638dbdbe6d917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610aaf565b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152606401600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210156105255760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60008054604080516393f1a40b60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152306024820152815184936001600160a01b0316926393f1a40b9260448082019391829003018186803b15801561059257600080fd5b505afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610ac8565b60005491935091506001600160a01b031663d1abb9077f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b03166044820152606401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505060006106b37f000000000000000000000000000000000000000000000000000000000000000090565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190610aaf565b90508015610788576107886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836107f8565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610828565b6040516001600160a01b03831660248201526044810182905261078890849063a9059cbb60e01b906064016107c1565b600061087d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108fa9092919063ffffffff16565b805190915015610788578080602001905181019061089b9190610a74565b6107885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051c565b60606109098484600085610913565b90505b9392505050565b6060824710156109745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051c565b843b6109c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051c565b600080866001600160a01b031685876040516109de9190610aec565b60006040518083038185875af1925050503d8060008114610a1b576040519150601f19603f3d011682016040523d82523d6000602084013e610a20565b606091505b5091509150610a30828286610a3b565b979650505050505050565b60608315610a4a57508161090c565b825115610a5a5782518084602001fd5b8160405162461bcd60e51b815260040161051c9190610b08565b600060208284031215610a8657600080fd5b8151801515811461090c57600080fd5b600060208284031215610aa857600080fd5b5035919050565b600060208284031215610ac157600080fd5b5051919050565b60008060408385031215610adb57600080fd5b505080516020909101519092909150565b60008251610afe818460208701610b3b565b9190910192915050565b6020815260008251806020840152610b27816040850160208701610b3b565b601f01601f19169190910160400192915050565b60005b83811015610b56578181015183820152602001610b3e565b83811115610210575050600091015256fea26469706673582212200d37a172cac16c4ceb7241cf570216ec19b842dddd059b96324bb33b8a1ad9cf64736f6c63430008070033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E29A56B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6E29A56B EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x86D1A69F EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0xB91D4001 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38AF3EED EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x6B4788A9 EQ PUSH2 0xCB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x162 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0xA96 JUMP JUMPDEST PUSH2 0x216 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x495 JUMP JUMPDEST PUSH32 0x0 PUSH2 0xED JUMP JUMPDEST PUSH32 0x0 PUSH2 0xA4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18FCCC76 PUSH32 0x0 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x210 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x24B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS DUP5 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 SWAP2 AND SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F1 SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F SWAP2 SWAP1 PUSH2 0xA74 JUMP JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 PUSH4 0x8DBDBE6D SWAP2 PUSH32 0x0 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x436 SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 TIMESTAMP LT ISZERO PUSH2 0x525 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E54696D656C6F636B3A2063757272656E742074696D652069732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x65666F72652072656C656173652074696D65 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x93F1A40B PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP2 MLOAD DUP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x93F1A40B SWAP3 PUSH1 0x44 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5CA SWAP2 SWAP1 PUSH2 0xAC8 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD1ABB907 PUSH32 0x0 DUP5 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x686 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x6B3 PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x708 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x72C SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x788 JUMPI PUSH2 0x788 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH32 0x0 DUP4 PUSH2 0x7F8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x210 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x828 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x788 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x7C1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x788 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x89B SWAP2 SWAP1 PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x788 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x909 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x913 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x51C JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x9C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x51C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA1B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA20 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xA30 DUP3 DUP3 DUP7 PUSH2 0xA3B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xA4A JUMPI POP DUP2 PUSH2 0x90C JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xA5A JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x90C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xADB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAFE DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xB3B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB27 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB56 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB3E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x210 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD CALLDATACOPY LOG1 PUSH19 0xCAC16C4CEB7241CF570216EC19B842DDDD059B SWAP7 ORIGIN 0x4B 0xB3 EXTCODESIZE DUP11 BYTE 0xD9 0xCF PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
          "sourceMap": "717:3016:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2012:89;2082:12;2012:89;;;-1:-1:-1;;;;;1363:32:18;;;1345:51;;1333:2;1318:18;2012:89:17;;;;;;;;3632:99;;;:::i;:::-;;3081;3156:17;3081:99;;;4417:25:18;;;4405:2;4390:18;3081:99:17;4271:177:18;3272:354:17;;;;;;:::i;:::-;;:::i;2353:722::-;;;:::i;2177:89::-;2247:12;2177:89;;1868:76;1931:6;1868:76;;3632:99;3670:11;;-1:-1:-1;;;;;3670:11:17;:19;3156:17;2082:12;3670:54;;-1:-1:-1;;;;;;3670:54:17;;;;;;;;;;4627:25:18;;;;-1:-1:-1;;;;;4688:32:18;4668:18;;;4661:60;4600:18;;3670:54:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3632:99::o;3272:354::-;3339:58;-1:-1:-1;;;;;3339:6:17;:23;3363:10;3383:4;3390:6;3339:23;:58::i;:::-;3431:11;;3445:31;;-1:-1:-1;;;3445:31:17;;3470:4;3445:31;;;1345:51:18;-1:-1:-1;;;;;3408:6:17;:14;;;;;3431:11;;;3408:14;;3445:16;;1318:18:18;;3445:31:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3408:69;;-1:-1:-1;;;;;;3408:69:17;;;;;;;-1:-1:-1;;;;;1979:32:18;;;3408:69:17;;;1961:51:18;2028:18;;;2021:34;1934:18;;3408:69:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3487:11:17;;3551:31;;-1:-1:-1;;;3551:31:17;;3576:4;3551:31;;;1345:51:18;-1:-1:-1;;;;;3487:11:17;;;;:19;;3520:17;;3551:6;:16;;;;1318:18:18;;3551:31:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3487:132;;-1:-1:-1;;;;;;3487:132:17;;;;;;;;;;4934:25:18;;;;4975:18;;;4968:34;3604:4:17;5018:18:18;;;5011:60;4907:18;;3487:132:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3272:354;:::o;2353:722::-;2247:12;2410:15;:32;;2389:129;;;;-1:-1:-1;;;2389:129:17;;2878:2:18;2389:129:17;;;2860:21:18;2917:2;2897:18;;;2890:30;2956:34;2936:18;;;2929:62;-1:-1:-1;;;3007:18:18;;;3000:48;3065:19;;2389:129:17;;;;;;;;;2530:14;2568:11;;:89;;;-1:-1:-1;;;2568:89:17;;3156:17;2568:89;;;4627:25:18;2642:4:17;4668:18:18;;;4661:60;2568:89:17;;2530:14;;-1:-1:-1;;;;;2568:11:17;;:20;;4600:18:18;;;;;2568:89:17;;;;;;:11;:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2718:11;;2529:128;;-1:-1:-1;2529:128:17;-1:-1:-1;;;;;;2718:11:17;:30;3156:17;2794:6;2082:12;2718:119;;-1:-1:-1;;;;;;2718:119:17;;;;;;;;;;4934:25:18;;;;4975:18;;;4968:34;;;;-1:-1:-1;;;;;5038:32:18;5018:18;;;5011:60;4907:18;;2718:119:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2910:19;2932:7;1931:6;;1868:76;2932:7;:32;;-1:-1:-1;;;2932:32:17;;2958:4;2932:32;;;1345:51:18;-1:-1:-1;;;;;2932:17:17;;;;;;;1318:18:18;;2932:32:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2910:54;-1:-1:-1;2979:15:17;;2975:94;;3010:48;-1:-1:-1;;;;;1931:6:17;3010:20;2082:12;3046:11;3010:20;:48::i;:::-;2379:696;;;2353:722::o;845:241:4:-;1010:68;;-1:-1:-1;;;;;1665:15:18;;;1010:68:4;;;1647:34:18;1717:15;;1697:18;;;1690:43;1749:18;;;1742:34;;;983:96:4;;1003:5;;-1:-1:-1;;;1033:27:4;1582:18:18;;1010:68:4;;;;-1:-1:-1;;1010:68:4;;;;;;;;;;;;;;-1:-1:-1;;;;;1010:68:4;-1:-1:-1;;;;;;1010:68:4;;;;;;;;;;983:19;:96::i;634:205::-;773:58;;-1:-1:-1;;;;;1979:32:18;;773:58:4;;;1961:51:18;2028:18;;;2021:34;;;746:86:4;;766:5;;-1:-1:-1;;;796:23:4;1934:18:18;;773:58:4;1787:274:18;3140:706:4;3559:23;3585:69;3613:4;3585:69;;;;;;;;;;;;;;;;;3593:5;-1:-1:-1;;;;;3585:27:4;;;:69;;;;;:::i;:::-;3668:17;;3559:95;;-1:-1:-1;3668:21:4;3664:176;;3763:10;3752:30;;;;;;;;;;;;:::i;:::-;3744:85;;;;-1:-1:-1;;;3744:85:4;;4062:2:18;3744:85:4;;;4044:21:18;4101:2;4081:18;;;4074:30;4140:34;4120:18;;;4113:62;-1:-1:-1;;;4191:18:18;;;4184:40;4241:19;;3744:85:4;3860:406:18;3461:223:5;3594:12;3625:52;3647:6;3655:4;3661:1;3664:12;3625:21;:52::i;:::-;3618:59;;3461:223;;;;;;:::o;4548:499::-;4713:12;4770:5;4745:21;:30;;4737:81;;;;-1:-1:-1;;;4737:81:5;;3297:2:18;4737:81:5;;;3279:21:18;3336:2;3316:18;;;3309:30;3375:34;3355:18;;;3348:62;-1:-1:-1;;;3426:18:18;;;3419:36;3472:19;;4737:81:5;3095:402:18;4737:81:5;1034:20;;4828:60;;;;-1:-1:-1;;;4828:60:5;;3704:2:18;4828:60:5;;;3686:21:18;3743:2;3723:18;;;3716:30;3782:31;3762:18;;;3755:59;3831:18;;4828:60:5;3502:353:18;4828:60:5;4900:12;4914:23;4941:6;-1:-1:-1;;;;;4941:11:5;4960:5;4967:4;4941:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4899:73;;;;4989:51;5006:7;5015:10;5027:12;4989:16;:51::i;:::-;4982:58;4548:499;-1:-1:-1;;;;;;;4548:499:5:o;7161:692::-;7307:12;7335:7;7331:516;;;-1:-1:-1;7365:10:5;7358:17;;7331:516;7476:17;;:21;7472:365;;7670:10;7664:17;7730:15;7717:10;7713:2;7709:19;7702:44;7472:365;7809:12;7802:20;;-1:-1:-1;;;7802:20:5;;;;;;;;:::i;14:277:18:-;81:6;134:2;122:9;113:7;109:23;105:32;102:52;;;150:1;147;140:12;102:52;182:9;176:16;235:5;228:13;221:21;214:5;211:32;201:60;;257:1;254;247:12;296:180;355:6;408:2;396:9;387:7;383:23;379:32;376:52;;;424:1;421;414:12;376:52;-1:-1:-1;447:23:18;;296:180;-1:-1:-1;296:180:18:o;481:184::-;551:6;604:2;592:9;583:7;579:23;575:32;572:52;;;620:1;617;610:12;572:52;-1:-1:-1;643:16:18;;481:184;-1:-1:-1;481:184:18:o;670:245::-;749:6;757;810:2;798:9;789:7;785:23;781:32;778:52;;;826:1;823;816:12;778:52;-1:-1:-1;;849:16:18;;905:2;890:18;;;884:25;849:16;;884:25;;-1:-1:-1;670:245:18:o;920:274::-;1049:3;1087:6;1081:13;1103:53;1149:6;1144:3;1137:4;1129:6;1125:17;1103:53;:::i;:::-;1172:16;;;;;920:274;-1:-1:-1;;920:274:18:o;2288:383::-;2437:2;2426:9;2419:21;2400:4;2469:6;2463:13;2512:6;2507:2;2496:9;2492:18;2485:34;2528:66;2587:6;2582:2;2571:9;2567:18;2562:2;2554:6;2550:15;2528:66;:::i;:::-;2655:2;2634:15;-1:-1:-1;;2630:29:18;2615:45;;;;2662:2;2611:54;;2288:383;-1:-1:-1;;2288:383:18:o;5082:258::-;5154:1;5164:113;5178:6;5175:1;5172:13;5164:113;;;5254:11;;;5248:18;5235:11;;;5228:39;5200:2;5193:10;5164:113;;;5295:6;5292:1;5289:13;5286:48;;;-1:-1:-1;;5330:1:18;5312:16;;5305:27;5082:258::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "594600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "beneficiary()": "infinite",
            "depositAllToMasterChef(uint256)": "infinite",
            "harvest()": "infinite",
            "masterChefPoolId()": "infinite",
            "release()": "infinite",
            "releaseTime()": "infinite",
            "token()": "infinite"
          }
        },
        "methodIdentifiers": {
          "beneficiary()": "38af3eed",
          "depositAllToMasterChef(uint256)": "6e29a56b",
          "harvest()": "4641257d",
          "masterChefPoolId()": "6b4788a9",
          "release()": "86d1a69f",
          "releaseTime()": "b91d4001",
          "token()": "fc0c546a"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime_\",\"type\":\"uint256\"},{\"internalType\":\"contract OfficialMasterChef\",\"name\":\"masterChef_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPoolId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAllToMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A token holder contract that will allow a beneficiary to extract the tokens after a given release time. Useful for simple vesting schedules like \\\"advisors get all of their tokens after 1 year\\\".\",\"kind\":\"dev\",\"methods\":{\"beneficiary()\":{\"returns\":{\"_0\":\"the beneficiary of the tokens.\"}},\"releaseTime()\":{\"returns\":{\"_0\":\"the time when the tokens are released.\"}},\"token()\":{\"returns\":{\"_0\":\"the token being held.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositAllToMasterChef(uint256)\":{\"notice\":\"Transfers tokens held by timelock to master chef pool.\"},\"release()\":{\"notice\":\"Transfers tokens held by timelock to beneficiary.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vesting/MasterChefLpTokenTimelock.sol\":\"MasterChefLpTokenTimelock\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onBeetsReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 beetsAmount,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 beetsAmount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe4e23d8325aa5c734bfa78495d4cf47adccd9af74beeef7177510d9093892a4a\",\"license\":\"MIT\"},\"contracts/token/OfficialMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./OfficialToken.sol\\\";\\nimport \\\"../interfaces/IRewarder.sol\\\";\\n\\n/*\\n    This master chef is based on SUSHI's version with some adjustments:\\n     - Upgrade to pragma 0.8.7\\n     - therefore remove usage of SafeMath (built in overflow check for solidity > 8)\\n     - Merge sushi's master chef V1 & V2 (no usage of dummy pool)\\n     - remove withdraw function (without harvest) => requires the rewardDebt to be an signed int instead of uint which requires a lot of casting and has no real usecase for us\\n     - no dev emissions, but treasury emissions instead\\n     - treasury percentage is subtracted from emissions instead of added on top\\n     - update of emission rate with upper limit of 6 BEETS/block\\n     - more require checks in general\\n*/\\n\\n// Have fun reading it. Hopefully it's still bug-free\\ncontract OfficialMasterChef is Ownable {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BEETS\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accBeetsPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accBeetsPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        // we have a fixed number of BEETS tokens released per block, each pool gets his fraction based on the allocPoint\\n        uint256 allocPoint; // How many allocation points assigned to this pool. the fraction BEETS to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that BEETS distribution occurs.\\n        uint256 accBeetsPerShare; // Accumulated BEETS per LP share. this is multiplied by ACC_BEETS_PRECISION for more exact results (rounding errors)\\n    }\\n    // The BEETS TOKEN!\\n    OfficialToken public beets;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // BEETS tokens created per block.\\n    uint256 public beetsPerBlock;\\n\\n    uint256 private constant ACC_BEETS_PRECISION = 1e12;\\n\\n    // distribution percentages: a value of 1000 = 100%\\n    // 12.8% percentage of pool rewards that goes to the treasury.\\n    uint256 public constant TREASURY_PERCENTAGE = 128;\\n\\n    // 87.2% percentage of pool rewards that goes to LP holders.\\n    uint256 public constant POOL_PERCENTAGE = 872;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens per pool. poolId => address => userInfo\\n    /// @notice Address of the LP token for each MCV pool.\\n    IERC20[] public lpTokens;\\n\\n    EnumerableSet.AddressSet private lpTokenAddresses;\\n\\n    /// @notice Address of each `IRewarder` contract in MCV.\\n    IRewarder[] public rewarder;\\n\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // mapping form poolId => user Address => User Info\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when BEETS mining starts.\\n    uint256 public startBlock;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event LogPoolAddition(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        IRewarder indexed rewarder\\n    );\\n    event LogSetPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IRewarder indexed rewarder,\\n        bool overwrite\\n    );\\n    event LogUpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardBlock,\\n        uint256 lpSupply,\\n        uint256 accBeetsPerShare\\n    );\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n    event UpdateEmissionRate(address indexed user, uint256 _beetsPerSec);\\n\\n    constructor(\\n        OfficialToken _beets,\\n        address _treasuryAddress,\\n        uint256 _beetsPerBlock,\\n        uint256 _startBlock\\n    ) {\\n        require(\\n            _beetsPerBlock <= 6e18,\\n            \\\"maximum emission rate of 6 beets per block exceeded\\\"\\n        );\\n        beets = _beets;\\n        treasuryAddress = _treasuryAddress;\\n        beetsPerBlock = _beetsPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        IRewarder _rewarder\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"add: rewarder must be contract or zero\\\"\\n        );\\n        // we make sure the same LP cannot be added twice which would cause trouble\\n        require(\\n            !lpTokenAddresses.contains(address(_lpToken)),\\n            \\\"add: LP already added\\\"\\n        );\\n\\n        // respect startBlock!\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n\\n        // LP tokens, rewarders & pools are always on the same index which translates into the pid\\n        lpTokens.push(_lpToken);\\n        lpTokenAddresses.add(address(_lpToken));\\n        rewarder.push(_rewarder);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accBeetsPerShare: 0\\n            })\\n        );\\n        emit LogPoolAddition(\\n            lpTokens.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _rewarder\\n        );\\n    }\\n\\n    // Update the given pool's BEETS allocation point. Can only be called by the owner.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _allocPoint New AP of the pool.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"set: rewarder must be contract or zero\\\"\\n        );\\n\\n        // we re-adjust the total allocation points\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n\\n        if (overwrite) {\\n            rewarder[_pid] = _rewarder;\\n        }\\n        emit LogSetPool(\\n            _pid,\\n            _allocPoint,\\n            overwrite ? _rewarder : rewarder[_pid],\\n            overwrite\\n        );\\n    }\\n\\n    // View function to see pending BEETS on frontend.\\n    function pendingBeets(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pending)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        // how many BEETS per lp token\\n        uint256 accBeetsPerShare = pool.accBeetsPerShare;\\n        // total staked lp tokens in this pool\\n        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 blocksSinceLastReward = block.number - pool.lastRewardBlock;\\n            // based on the pool weight (allocation points) we calculate the beets rewarded for this specific pool\\n            uint256 beetsRewards = (blocksSinceLastReward *\\n                beetsPerBlock *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            // we take parts of the rewards for treasury, these can be subject to change, so we recalculate it\\n            // a value of 1000 = 100%\\n            uint256 beetsRewardsForPool = (beetsRewards * POOL_PERCENTAGE) /\\n                1000;\\n\\n            // we calculate the new amount of accumulated beets per LP token\\n            accBeetsPerShare =\\n                accBeetsPerShare +\\n                ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\\n        }\\n        // based on the number of LP tokens the user owns, we calculate the pending amount by subtracting the amount\\n        // which he is not eligible for (joined the pool later) or has already harvested\\n        pending =\\n            (user.amount * accBeetsPerShare) /\\n            ACC_BEETS_PRECISION -\\n            user.rewardDebt;\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n    function massUpdatePools(uint256[] calldata pids) external {\\n        uint256 len = pids.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(pids[i]);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n\\n        if (block.number > pool.lastRewardBlock) {\\n            // total lp tokens staked for this pool\\n            uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n            if (lpSupply > 0) {\\n                uint256 blocksSinceLastReward = block.number -\\n                    pool.lastRewardBlock;\\n\\n                // rewards for this pool based on his allocation points\\n                uint256 beetsRewards = (blocksSinceLastReward *\\n                    beetsPerBlock *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                uint256 beetsRewardsForPool = (beetsRewards * POOL_PERCENTAGE) /\\n                    1000;\\n\\n                beets.mint(\\n                    treasuryAddress,\\n                    (beetsRewards * TREASURY_PERCENTAGE) / 1000\\n                );\\n\\n                beets.mint(address(this), beetsRewardsForPool);\\n\\n                pool.accBeetsPerShare =\\n                    pool.accBeetsPerShare +\\n                    ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n\\n            emit LogUpdatePool(\\n                _pid,\\n                pool.lastRewardBlock,\\n                lpSupply,\\n                pool.accBeetsPerShare\\n            );\\n        }\\n    }\\n\\n    // Deposit LP tokens to MasterChef for BEETS allocation.\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_to];\\n\\n        user.amount = user.amount + _amount;\\n        // since we add more LP tokens, we have to keep track of the rewards he is not eligible for\\n        // if we would not do that, he would get rewards like he added them since the beginning of this pool\\n        // note that only the accBeetsPerShare have the precision applied\\n        user.rewardDebt =\\n            user.rewardDebt +\\n            (_amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(_pid, _to, _to, 0, user.amount);\\n        }\\n\\n        lpTokens[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount, _to);\\n    }\\n\\n    function harvestAll(uint256[] calldata _pids, address _to) external {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            if (userInfo[_pids[i]][msg.sender].amount > 0) {\\n                harvest(_pids[i], _to);\\n            }\\n        }\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `_to`.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _to Receiver of BEETS rewards.\\n    function harvest(uint256 _pid, address _to) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // this would  be the amount if the user joined right from the start of the farm\\n        uint256 accumulatedBeets = (user.amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        // subtracting the rewards the user is not eligible for\\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\\n\\n        // we set the new rewardDebt to the current accumulated amount of rewards for his amount of LP token\\n        user.rewardDebt = accumulatedBeets;\\n\\n        if (eligibleBeets > 0) {\\n            safeBeetsTransfer(_to, eligibleBeets);\\n        }\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(\\n                _pid,\\n                msg.sender,\\n                _to,\\n                eligibleBeets,\\n                user.amount\\n            );\\n        }\\n\\n        emit Harvest(msg.sender, _pid, eligibleBeets);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MCV and harvest proceeds for transaction sender to `_to`.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _amount LP token amount to withdraw.\\n    /// @param _to Receiver of the LP tokens and BEETS rewards.\\n    function withdrawAndHarvest(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(_amount <= user.amount, \\\"cannot withdraw more than deposited\\\");\\n\\n        // this would  be the amount if the user joined right from the start of the farm\\n        uint256 accumulatedBeets = (user.amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        // subtracting the rewards the user is not eligible for\\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\\n\\n        /*\\n            after harvest & withdraw, he should be eligible for exactly 0 tokens\\n            => userInfo.amount * pool.accBeetsPerShare / ACC_BEETS_PRECISION == userInfo.rewardDebt\\n            since we are removing some LP's from userInfo.amount, we also have to remove\\n            the equivalent amount of reward debt\\n        */\\n\\n        user.rewardDebt =\\n            accumulatedBeets -\\n            (_amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        user.amount = user.amount - _amount;\\n\\n        safeBeetsTransfer(_to, eligibleBeets);\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(\\n                _pid,\\n                msg.sender,\\n                _to,\\n                eligibleBeets,\\n                user.amount\\n            );\\n        }\\n\\n        lpTokens[_pid].safeTransfer(_to, _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount, _to);\\n        emit Harvest(msg.sender, _pid, eligibleBeets);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid, address _to) public {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(_pid, msg.sender, _to, 0, 0);\\n        }\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpTokens[_pid].safeTransfer(_to, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\\n    }\\n\\n    // Safe BEETS transfer function, just in case if rounding error causes pool to not have enough BEETS.\\n    function safeBeetsTransfer(address _to, uint256 _amount) internal {\\n        uint256 beetsBalance = beets.balanceOf(address(this));\\n        if (_amount > beetsBalance) {\\n            beets.transfer(_to, beetsBalance);\\n        } else {\\n            beets.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update treasury address by the owner.\\n    function treasury(address _treasuryAddress) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(treasuryAddress, _treasuryAddress);\\n    }\\n\\n    function updateEmissionRate(uint256 _beetsPerBlock) public onlyOwner {\\n        require(\\n            _beetsPerBlock <= 6e18,\\n            \\\"maximum emission rate of 6 beets per block exceeded\\\"\\n        );\\n        beetsPerBlock = _beetsPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _beetsPerBlock);\\n    }\\n}\\n\",\"keccak256\":\"0xdd3e7bffa629907bf9c91be65e5724276ce06bd51347e9b973a3600e1e04a4f5\",\"license\":\"MIT\"},\"contracts/token/OfficialToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OfficialToken is ERC20(\\\"OfficialToken\\\", \\\"CIAL\\\"), Ownable {\\n    uint256 public constant MAX_SUPPLY = 250_000_000e18; // 250 million beets\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        require(\\n            totalSupply() + _amount <= MAX_SUPPLY,\\n            \\\"CIAL::mint: cannot exceed max supply\\\"\\n        );\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3692667ca66fc172820d5b791540daaa95ae30db33c7d998fba6ad998a99d8e8\",\"license\":\"MIT\"},\"contracts/vesting/MasterChefLpTokenTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../token/OfficialMasterChef.sol\\\";\\n\\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/utils/TokenTimelock.sol\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\n\\n/*\\n    Additions:\\n        - stake tokens on deposit in master chef pool\\n        - allow withdrawal of master chef rewards at any time\\n        - un-stake and transfer tokens to beneficiary on release\\n*/\\ncontract MasterChefLpTokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private immutable _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private immutable _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private immutable _releaseTime;\\n\\n    OfficialMasterChef private _masterChef;\\n\\n    uint256 private immutable _masterChefPoolId;\\n\\n    constructor(\\n        IERC20 token_,\\n        address beneficiary_,\\n        uint256 releaseTime_,\\n        OfficialMasterChef masterChef_,\\n        uint256 masterChefPoolId_\\n    ) {\\n        require(\\n            releaseTime_ > block.timestamp,\\n            \\\"TokenTimelock: release time is before current time\\\"\\n        );\\n        require(\\n            masterChef_.lpTokens(masterChefPoolId_) == token_,\\n            \\\"Provided poolId not eligible for this token\\\"\\n        );\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n        _masterChef = masterChef_;\\n        _masterChefPoolId = masterChefPoolId_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public {\\n        require(\\n            block.timestamp >= releaseTime(),\\n            \\\"TokenTimelock: current time is before release time\\\"\\n        );\\n\\n        (uint256 amount, uint256 rewardDebt) = _masterChef.userInfo(\\n            masterChefPoolId(),\\n            address(this)\\n        );\\n        // withdraw & harvest all from master chef\\n        _masterChef.withdrawAndHarvest(\\n            masterChefPoolId(),\\n            amount,\\n            beneficiary()\\n        );\\n\\n        // release everything which remained on this contract\\n        uint256 localAmount = token().balanceOf(address(this));\\n\\n        if (localAmount > 0) {\\n            token().safeTransfer(beneficiary(), localAmount);\\n        }\\n    }\\n\\n    function masterChefPoolId() public view returns (uint256) {\\n        return _masterChefPoolId;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to master chef pool.\\n     */\\n    function depositAllToMasterChef(uint256 amount) external {\\n        _token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _token.approve(address(_masterChef), _token.balanceOf(address(this)));\\n        _masterChef.deposit(\\n            _masterChefPoolId,\\n            _token.balanceOf(address(this)),\\n            address(this)\\n        );\\n    }\\n\\n    function harvest() external {\\n        _masterChef.harvest(masterChefPoolId(), beneficiary());\\n    }\\n}\\n\",\"keccak256\":\"0x96e0e24f883f1dba892f2eaf156e7e95e8038766271316ed3589d7fd1663e2dd\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 4135,
            "contract": "contracts/vesting/MasterChefLpTokenTimelock.sol:MasterChefLpTokenTimelock",
            "label": "_masterChef",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(OfficialMasterChef)4075"
          }
        ],
        "types": {
          "t_contract(OfficialMasterChef)4075": {
            "encoding": "inplace",
            "label": "contract OfficialMasterChef",
            "numberOfBytes": "20"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "depositAllToMasterChef(uint256)": {
            "notice": "Transfers tokens held by timelock to master chef pool."
          },
          "release()": {
            "notice": "Transfers tokens held by timelock to beneficiary."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/interfaces/IRewarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onBeetsReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 beetsAmount,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 beetsAmount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/token/OfficialMasterChef.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./OfficialToken.sol\\\";\\nimport \\\"../interfaces/IRewarder.sol\\\";\\n\\n/*\\n    This master chef is based on SUSHI's version with some adjustments:\\n     - Upgrade to pragma 0.8.7\\n     - therefore remove usage of SafeMath (built in overflow check for solidity > 8)\\n     - Merge sushi's master chef V1 & V2 (no usage of dummy pool)\\n     - remove withdraw function (without harvest) => requires the rewardDebt to be an signed int instead of uint which requires a lot of casting and has no real usecase for us\\n     - no dev emissions, but treasury emissions instead\\n     - treasury percentage is subtracted from emissions instead of added on top\\n     - update of emission rate with upper limit of 6 BEETS/block\\n     - more require checks in general\\n*/\\n\\n// Have fun reading it. Hopefully it's still bug-free\\ncontract OfficialMasterChef is Ownable {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BEETS\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accBeetsPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accBeetsPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        // we have a fixed number of BEETS tokens released per block, each pool gets his fraction based on the allocPoint\\n        uint256 allocPoint; // How many allocation points assigned to this pool. the fraction BEETS to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that BEETS distribution occurs.\\n        uint256 accBeetsPerShare; // Accumulated BEETS per LP share. this is multiplied by ACC_BEETS_PRECISION for more exact results (rounding errors)\\n    }\\n    // The BEETS TOKEN!\\n    OfficialToken public beets;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // BEETS tokens created per block.\\n    uint256 public beetsPerBlock;\\n\\n    uint256 private constant ACC_BEETS_PRECISION = 1e12;\\n\\n    // distribution percentages: a value of 1000 = 100%\\n    // 12.8% percentage of pool rewards that goes to the treasury.\\n    uint256 public constant TREASURY_PERCENTAGE = 128;\\n\\n    // 87.2% percentage of pool rewards that goes to LP holders.\\n    uint256 public constant POOL_PERCENTAGE = 872;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens per pool. poolId => address => userInfo\\n    /// @notice Address of the LP token for each MCV pool.\\n    IERC20[] public lpTokens;\\n\\n    EnumerableSet.AddressSet private lpTokenAddresses;\\n\\n    /// @notice Address of each `IRewarder` contract in MCV.\\n    IRewarder[] public rewarder;\\n\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // mapping form poolId => user Address => User Info\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when BEETS mining starts.\\n    uint256 public startBlock;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event LogPoolAddition(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        IRewarder indexed rewarder\\n    );\\n    event LogSetPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IRewarder indexed rewarder,\\n        bool overwrite\\n    );\\n    event LogUpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardBlock,\\n        uint256 lpSupply,\\n        uint256 accBeetsPerShare\\n    );\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n    event UpdateEmissionRate(address indexed user, uint256 _beetsPerSec);\\n\\n    constructor(\\n        OfficialToken _beets,\\n        address _treasuryAddress,\\n        uint256 _beetsPerBlock,\\n        uint256 _startBlock\\n    ) {\\n        require(\\n            _beetsPerBlock <= 6e18,\\n            \\\"maximum emission rate of 6 beets per block exceeded\\\"\\n        );\\n        beets = _beets;\\n        treasuryAddress = _treasuryAddress;\\n        beetsPerBlock = _beetsPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        IRewarder _rewarder\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"add: rewarder must be contract or zero\\\"\\n        );\\n        // we make sure the same LP cannot be added twice which would cause trouble\\n        require(\\n            !lpTokenAddresses.contains(address(_lpToken)),\\n            \\\"add: LP already added\\\"\\n        );\\n\\n        // respect startBlock!\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n\\n        // LP tokens, rewarders & pools are always on the same index which translates into the pid\\n        lpTokens.push(_lpToken);\\n        lpTokenAddresses.add(address(_lpToken));\\n        rewarder.push(_rewarder);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accBeetsPerShare: 0\\n            })\\n        );\\n        emit LogPoolAddition(\\n            lpTokens.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _rewarder\\n        );\\n    }\\n\\n    // Update the given pool's BEETS allocation point. Can only be called by the owner.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _allocPoint New AP of the pool.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"set: rewarder must be contract or zero\\\"\\n        );\\n\\n        // we re-adjust the total allocation points\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n\\n        if (overwrite) {\\n            rewarder[_pid] = _rewarder;\\n        }\\n        emit LogSetPool(\\n            _pid,\\n            _allocPoint,\\n            overwrite ? _rewarder : rewarder[_pid],\\n            overwrite\\n        );\\n    }\\n\\n    // View function to see pending BEETS on frontend.\\n    function pendingBeets(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pending)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        // how many BEETS per lp token\\n        uint256 accBeetsPerShare = pool.accBeetsPerShare;\\n        // total staked lp tokens in this pool\\n        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 blocksSinceLastReward = block.number - pool.lastRewardBlock;\\n            // based on the pool weight (allocation points) we calculate the beets rewarded for this specific pool\\n            uint256 beetsRewards = (blocksSinceLastReward *\\n                beetsPerBlock *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            // we take parts of the rewards for treasury, these can be subject to change, so we recalculate it\\n            // a value of 1000 = 100%\\n            uint256 beetsRewardsForPool = (beetsRewards * POOL_PERCENTAGE) /\\n                1000;\\n\\n            // we calculate the new amount of accumulated beets per LP token\\n            accBeetsPerShare =\\n                accBeetsPerShare +\\n                ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\\n        }\\n        // based on the number of LP tokens the user owns, we calculate the pending amount by subtracting the amount\\n        // which he is not eligible for (joined the pool later) or has already harvested\\n        pending =\\n            (user.amount * accBeetsPerShare) /\\n            ACC_BEETS_PRECISION -\\n            user.rewardDebt;\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n    function massUpdatePools(uint256[] calldata pids) external {\\n        uint256 len = pids.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(pids[i]);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n\\n        if (block.number > pool.lastRewardBlock) {\\n            // total lp tokens staked for this pool\\n            uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n            if (lpSupply > 0) {\\n                uint256 blocksSinceLastReward = block.number -\\n                    pool.lastRewardBlock;\\n\\n                // rewards for this pool based on his allocation points\\n                uint256 beetsRewards = (blocksSinceLastReward *\\n                    beetsPerBlock *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                uint256 beetsRewardsForPool = (beetsRewards * POOL_PERCENTAGE) /\\n                    1000;\\n\\n                beets.mint(\\n                    treasuryAddress,\\n                    (beetsRewards * TREASURY_PERCENTAGE) / 1000\\n                );\\n\\n                beets.mint(address(this), beetsRewardsForPool);\\n\\n                pool.accBeetsPerShare =\\n                    pool.accBeetsPerShare +\\n                    ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n\\n            emit LogUpdatePool(\\n                _pid,\\n                pool.lastRewardBlock,\\n                lpSupply,\\n                pool.accBeetsPerShare\\n            );\\n        }\\n    }\\n\\n    // Deposit LP tokens to MasterChef for BEETS allocation.\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_to];\\n\\n        user.amount = user.amount + _amount;\\n        // since we add more LP tokens, we have to keep track of the rewards he is not eligible for\\n        // if we would not do that, he would get rewards like he added them since the beginning of this pool\\n        // note that only the accBeetsPerShare have the precision applied\\n        user.rewardDebt =\\n            user.rewardDebt +\\n            (_amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(_pid, _to, _to, 0, user.amount);\\n        }\\n\\n        lpTokens[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount, _to);\\n    }\\n\\n    function harvestAll(uint256[] calldata _pids, address _to) external {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            if (userInfo[_pids[i]][msg.sender].amount > 0) {\\n                harvest(_pids[i], _to);\\n            }\\n        }\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `_to`.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _to Receiver of BEETS rewards.\\n    function harvest(uint256 _pid, address _to) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // this would  be the amount if the user joined right from the start of the farm\\n        uint256 accumulatedBeets = (user.amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        // subtracting the rewards the user is not eligible for\\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\\n\\n        // we set the new rewardDebt to the current accumulated amount of rewards for his amount of LP token\\n        user.rewardDebt = accumulatedBeets;\\n\\n        if (eligibleBeets > 0) {\\n            safeBeetsTransfer(_to, eligibleBeets);\\n        }\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(\\n                _pid,\\n                msg.sender,\\n                _to,\\n                eligibleBeets,\\n                user.amount\\n            );\\n        }\\n\\n        emit Harvest(msg.sender, _pid, eligibleBeets);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MCV and harvest proceeds for transaction sender to `_to`.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _amount LP token amount to withdraw.\\n    /// @param _to Receiver of the LP tokens and BEETS rewards.\\n    function withdrawAndHarvest(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(_amount <= user.amount, \\\"cannot withdraw more than deposited\\\");\\n\\n        // this would  be the amount if the user joined right from the start of the farm\\n        uint256 accumulatedBeets = (user.amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        // subtracting the rewards the user is not eligible for\\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\\n\\n        /*\\n            after harvest & withdraw, he should be eligible for exactly 0 tokens\\n            => userInfo.amount * pool.accBeetsPerShare / ACC_BEETS_PRECISION == userInfo.rewardDebt\\n            since we are removing some LP's from userInfo.amount, we also have to remove\\n            the equivalent amount of reward debt\\n        */\\n\\n        user.rewardDebt =\\n            accumulatedBeets -\\n            (_amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        user.amount = user.amount - _amount;\\n\\n        safeBeetsTransfer(_to, eligibleBeets);\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(\\n                _pid,\\n                msg.sender,\\n                _to,\\n                eligibleBeets,\\n                user.amount\\n            );\\n        }\\n\\n        lpTokens[_pid].safeTransfer(_to, _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount, _to);\\n        emit Harvest(msg.sender, _pid, eligibleBeets);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid, address _to) public {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(_pid, msg.sender, _to, 0, 0);\\n        }\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpTokens[_pid].safeTransfer(_to, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\\n    }\\n\\n    // Safe BEETS transfer function, just in case if rounding error causes pool to not have enough BEETS.\\n    function safeBeetsTransfer(address _to, uint256 _amount) internal {\\n        uint256 beetsBalance = beets.balanceOf(address(this));\\n        if (_amount > beetsBalance) {\\n            beets.transfer(_to, beetsBalance);\\n        } else {\\n            beets.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update treasury address by the owner.\\n    function treasury(address _treasuryAddress) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(treasuryAddress, _treasuryAddress);\\n    }\\n\\n    function updateEmissionRate(uint256 _beetsPerBlock) public onlyOwner {\\n        require(\\n            _beetsPerBlock <= 6e18,\\n            \\\"maximum emission rate of 6 beets per block exceeded\\\"\\n        );\\n        beetsPerBlock = _beetsPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _beetsPerBlock);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"contracts/token/OfficialToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OfficialToken is ERC20(\\\"OfficialToken\\\", \\\"CIAL\\\"), Ownable {\\n    uint256 public constant MAX_SUPPLY = 250_000_000e18; // 250 million beets\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        require(\\n            totalSupply() + _amount <= MAX_SUPPLY,\\n            \\\"CIAL::mint: cannot exceed max supply\\\"\\n        );\\n        _mint(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"contracts/vesting/MasterChefLpTokenTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../token/OfficialMasterChef.sol\\\";\\n\\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/utils/TokenTimelock.sol\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\n\\n/*\\n    Additions:\\n        - stake tokens on deposit in master chef pool\\n        - allow withdrawal of master chef rewards at any time\\n        - un-stake and transfer tokens to beneficiary on release\\n*/\\ncontract MasterChefLpTokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private immutable _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private immutable _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private immutable _releaseTime;\\n\\n    OfficialMasterChef private _masterChef;\\n\\n    uint256 private immutable _masterChefPoolId;\\n\\n    constructor(\\n        IERC20 token_,\\n        address beneficiary_,\\n        uint256 releaseTime_,\\n        OfficialMasterChef masterChef_,\\n        uint256 masterChefPoolId_\\n    ) {\\n        require(\\n            releaseTime_ > block.timestamp,\\n            \\\"TokenTimelock: release time is before current time\\\"\\n        );\\n        require(\\n            masterChef_.lpTokens(masterChefPoolId_) == token_,\\n            \\\"Provided poolId not eligible for this token\\\"\\n        );\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n        _masterChef = masterChef_;\\n        _masterChefPoolId = masterChefPoolId_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public {\\n        require(\\n            block.timestamp >= releaseTime(),\\n            \\\"TokenTimelock: current time is before release time\\\"\\n        );\\n\\n        (uint256 amount, uint256 rewardDebt) = _masterChef.userInfo(\\n            masterChefPoolId(),\\n            address(this)\\n        );\\n        // withdraw & harvest all from master chef\\n        _masterChef.withdrawAndHarvest(\\n            masterChefPoolId(),\\n            amount,\\n            beneficiary()\\n        );\\n\\n        // release everything which remained on this contract\\n        uint256 localAmount = token().balanceOf(address(this));\\n\\n        if (localAmount > 0) {\\n            token().safeTransfer(beneficiary(), localAmount);\\n        }\\n    }\\n\\n    function masterChefPoolId() public view returns (uint256) {\\n        return _masterChefPoolId;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to master chef pool.\\n     */\\n    function depositAllToMasterChef(uint256 amount) external {\\n        _token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _token.approve(address(_masterChef), _token.balanceOf(address(this)));\\n        _masterChef.deposit(\\n            _masterChefPoolId,\\n            _token.balanceOf(address(this)),\\n            address(this)\\n        );\\n    }\\n\\n    function harvest() external {\\n        _masterChef.harvest(masterChefPoolId(), beneficiary());\\n    }\\n}\\n\"\n    },\n    \"contracts/rewarder/TimeBasedRewarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IRewarder.sol\\\";\\nimport \\\"../token/OfficialMasterChef.sol\\\";\\n\\ncontract TimeBasedRewarder is IRewarder, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable rewardToken;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 accRewardTokenPerShare;\\n        uint256 lastRewardTime;\\n        uint256 allocPoint;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    uint256[] public masterchefPoolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 totalAllocPoint;\\n\\n    uint256 public rewardPerSecond;\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n\\n    address private immutable MASTERCHEF;\\n\\n    event LogOnReward(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n    event LogUpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTime,\\n        uint256 lpSupply,\\n        uint256 accRewardTokenPerShare\\n    );\\n    event LogRewardPerSecond(uint256 rewardPerSecond);\\n    event LogInit();\\n\\n    constructor(\\n        IERC20 _rewardToken,\\n        uint256 _rewardPerSecond,\\n        address _MASTERCHEF\\n    ) {\\n        rewardToken = _rewardToken;\\n        rewardPerSecond = _rewardPerSecond;\\n        MASTERCHEF = _MASTERCHEF;\\n    }\\n\\n    function onBeetsReward(\\n        uint256 pid,\\n        address userAddress,\\n        address recipient,\\n        uint256,\\n        uint256 newLpAmount\\n    ) external override onlyMasterChef {\\n        PoolInfo memory pool = updatePool(pid);\\n        UserInfo storage userPoolInfo = userInfo[pid][userAddress];\\n        uint256 pending;\\n        if (userPoolInfo.amount > 0) {\\n            pending =\\n                ((userPoolInfo.amount * pool.accRewardTokenPerShare) /\\n                    ACC_TOKEN_PRECISION) -\\n                userPoolInfo.rewardDebt;\\n            if (pending > rewardToken.balanceOf(address(this))) {\\n                pending = rewardToken.balanceOf(address(this));\\n            }\\n        }\\n        userPoolInfo.amount = newLpAmount;\\n        userPoolInfo.rewardDebt =\\n            (newLpAmount * pool.accRewardTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        if (pending > 0) {\\n            rewardToken.safeTransfer(recipient, pending);\\n        }\\n\\n        emit LogOnReward(userAddress, pid, pending, recipient);\\n    }\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256\\n    )\\n        external\\n        view\\n        override\\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\\n    {\\n        IERC20[] memory _rewardTokens = new IERC20[](1);\\n        _rewardTokens[0] = (rewardToken);\\n        uint256[] memory _rewardAmounts = new uint256[](1);\\n        _rewardAmounts[0] = pendingToken(pid, user);\\n        return (_rewardTokens, _rewardAmounts);\\n    }\\n\\n    /// @notice Sets the rewards per second to be distributed. Can only be called by the owner.\\n    /// @param _rewardPerSecond The amount of token rewards to be distributed per second.\\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\n        rewardPerSecond = _rewardPerSecond;\\n        emit LogRewardPerSecond(_rewardPerSecond);\\n    }\\n\\n    modifier onlyMasterChef() {\\n        require(\\n            msg.sender == MASTERCHEF,\\n            \\\"Only MasterChef can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Returns the number of rewarded pools.\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = masterchefPoolIds.length;\\n    }\\n\\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\\n    /// @param allocPoint AP of the new pool.\\n    /// @param pid Pid on MasterChef\\n    function add(uint256 pid, uint256 allocPoint) public onlyOwner {\\n        require(poolInfo[pid].lastRewardTime == 0, \\\"Pool already exists\\\");\\n        uint256 lastRewardTime = block.timestamp;\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n\\n        poolInfo[pid] = PoolInfo({\\n            allocPoint: allocPoint,\\n            lastRewardTime: lastRewardTime,\\n            accRewardTokenPerShare: 0\\n        });\\n        masterchefPoolIds.push(pid);\\n        emit LogPoolAddition(pid, allocPoint);\\n    }\\n\\n    /// @notice Update the given pool's reward token allocation point and `IRewarder` contract. Can only be called by the owner.\\n    /// @param pid The index of the MasterChef pool. See `poolInfo`.\\n    /// @param allocPoint New AP of the pool.\\n    function set(uint256 pid, uint256 allocPoint) public onlyOwner {\\n        require(poolInfo[pid].lastRewardTime != 0, \\\"Pool does not exist\\\");\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[pid].allocPoint +\\n            allocPoint;\\n\\n        poolInfo[pid].allocPoint = allocPoint;\\n        emit LogSetPool(pid, allocPoint);\\n    }\\n\\n    /// @notice View function to see pending Token\\n    /// @param _pid The index of the MasterChef pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending rewards for a given user.\\n    function pendingToken(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256 pending)\\n    {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        if (pool.lastRewardTime == 0) {\\n            pending = 0;\\n        } else {\\n            UserInfo storage user = userInfo[_pid][_user];\\n            uint256 accRewardTokenPerShare = pool.accRewardTokenPerShare;\\n\\n            uint256 totalLpSupply = OfficialMasterChef(MASTERCHEF)\\n                .lpTokens(_pid)\\n                .balanceOf(MASTERCHEF);\\n\\n            if (block.timestamp > pool.lastRewardTime && totalLpSupply != 0) {\\n                uint256 timeSinceLastReward = block.timestamp -\\n                    pool.lastRewardTime;\\n\\n                uint256 rewards = (timeSinceLastReward *\\n                    rewardPerSecond *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accRewardTokenPerShare =\\n                    accRewardTokenPerShare +\\n                    ((rewards * ACC_TOKEN_PRECISION) / totalLpSupply);\\n            }\\n            pending =\\n                ((user.amount * accRewardTokenPerShare) / ACC_TOKEN_PRECISION) -\\n                user.rewardDebt;\\n            if (pending > rewardToken.balanceOf(address(this))) {\\n                pending = rewardToken.balanceOf(address(this));\\n            }\\n        }\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n    function massUpdatePools(uint256[] calldata pids) external {\\n        uint256 len = pids.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(pids[i]);\\n        }\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        if (pool.lastRewardTime != 0 && block.timestamp > pool.lastRewardTime) {\\n            uint256 totalLpSupply = OfficialMasterChef(MASTERCHEF)\\n                .lpTokens(pid)\\n                .balanceOf(MASTERCHEF);\\n\\n            if (totalLpSupply > 0) {\\n                uint256 time = block.timestamp - pool.lastRewardTime;\\n                uint256 tokenReward = (time *\\n                    rewardPerSecond *\\n                    pool.allocPoint) / totalAllocPoint;\\n                pool.accRewardTokenPerShare =\\n                    pool.accRewardTokenPerShare +\\n                    ((tokenReward * ACC_TOKEN_PRECISION) / totalLpSupply);\\n            }\\n            pool.lastRewardTime = block.timestamp;\\n            poolInfo[pid] = pool;\\n            emit LogUpdatePool(\\n                pid,\\n                pool.lastRewardTime,\\n                totalLpSupply,\\n                pool.accRewardTokenPerShare\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/ERC20Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 supply\\n    ) ERC20(name, symbol) {\\n        _mint(msg.sender, supply);\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/RewarderMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\nimport \\\"../interfaces/IRewarder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract RewarderMock is IRewarder {\\n    using SafeERC20 for IERC20;\\n    uint256 private immutable rewardMultiplier;\\n    IERC20 private immutable rewardToken;\\n    uint256 private constant REWARD_TOKEN_DIVISOR = 1e18;\\n    address private immutable BEETHOVEN_MASTERCHEF;\\n\\n    constructor(\\n        uint256 _rewardMultiplier,\\n        IERC20 _rewardToken,\\n        address _BEETHOVEN_MASTERCHEF\\n    ) {\\n        rewardMultiplier = _rewardMultiplier;\\n        rewardToken = _rewardToken;\\n        BEETHOVEN_MASTERCHEF = _BEETHOVEN_MASTERCHEF;\\n    }\\n\\n    function onBeetsReward(\\n        uint256,\\n        address user,\\n        address to,\\n        uint256 beetsAmount,\\n        uint256\\n    ) external override onlyMCV2 {\\n        uint256 pendingReward =\\n            (beetsAmount * rewardMultiplier) / REWARD_TOKEN_DIVISOR;\\n        uint256 rewardBal = rewardToken.balanceOf(address(this));\\n        if (pendingReward > rewardBal) {\\n            rewardToken.safeTransfer(to, rewardBal);\\n        } else {\\n            rewardToken.safeTransfer(to, pendingReward);\\n        }\\n    }\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 beetsAmount\\n    )\\n        external\\n        view\\n        override\\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\\n    {\\n        IERC20[] memory _rewardTokens = new IERC20[](1);\\n        _rewardTokens[0] = (rewardToken);\\n        uint256[] memory _rewardAmounts = new uint256[](1);\\n        _rewardAmounts[0] =\\n            (beetsAmount * rewardMultiplier) /\\n            REWARD_TOKEN_DIVISOR;\\n        return (_rewardTokens, _rewardAmounts);\\n    }\\n\\n    modifier onlyMCV2 {\\n        require(\\n            msg.sender == BEETHOVEN_MASTERCHEF,\\n            \\\"Only MCV2 can call this function.\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/RewarderBrokenMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\nimport \\\"../interfaces/IRewarder.sol\\\";\\n\\ncontract RewarderBrokenMock is IRewarder {\\n    function onBeetsReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 beetsAmount,\\n        uint256 newLpAmount\\n    ) external override {\\n        revert(\\\"mock failure\\\");\\n    }\\n\\n    function pendingTokens(\\n        uint256,\\n        address,\\n        uint256\\n    )\\n        external\\n        view\\n        override\\n        returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts)\\n    {\\n        revert(\\\"mock failure\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/ComplexRewarderTime.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//\\npragma solidity ^0.8.0;\\n//pragma experimental ABIEncoderV2;\\nimport \\\"../interfaces/IRewarder.sol\\\";\\n\\n//import \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\n//import \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\n//import \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\n\\n//import \\\"../MasterChefV2.sol.ref\\\";\\n//\\n///// @author @0xKeno\\n//contract ComplexRewarderTime is IRewarder, BoringOwnable {\\ncontract ComplexRewarderTime {\\n    //    using BoringMath for uint256;\\n    //    using BoringMath128 for uint128;\\n    //    using BoringERC20 for IERC20;\\n    //\\n    //    IERC20 private immutable rewardToken;\\n    //\\n    //    /// @notice Info of each MCV2 user.\\n    //    /// `amount` LP token amount the user has provided.\\n    //    /// `rewardDebt` The amount of SUSHI entitled to the user.\\n    //    struct UserInfo {\\n    //        uint256 amount;\\n    //        uint256 rewardDebt;\\n    //    }\\n    //\\n    //    /// @notice Info of each MCV2 pool.\\n    //    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    //    /// Also known as the amount of SUSHI to distribute per block.\\n    //    struct PoolInfo {\\n    //        uint128 accSushiPerShare;\\n    //        uint64 lastRewardTime;\\n    //        uint64 allocPoint;\\n    //    }\\n    //\\n    //    /// @notice Info of each pool.\\n    //    mapping (uint256 => PoolInfo) public poolInfo;\\n    //\\n    //    uint256[] public poolIds;\\n    //\\n    //    /// @notice Info of each user that stakes LP tokens.\\n    //    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    //    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    //    uint256 totalAllocPoint;\\n    //\\n    //    uint256 public rewardPerSecond;\\n    //    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n    //\\n    //    address private immutable MASTERCHEF_V2;\\n    //\\n    //    event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    //    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\\n    //    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n    //    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSushiPerShare);\\n    //    event LogRewardPerSecond(uint256 rewardPerSecond);\\n    //    event LogInit();\\n    //\\n    //    constructor (IERC20 _rewardToken, uint256 _rewardPerSecond, address _MASTERCHEF_V2) public {\\n    //        rewardToken = _rewardToken;\\n    //        rewardPerSecond = _rewardPerSecond;\\n    //        MASTERCHEF_V2 = _MASTERCHEF_V2;\\n    //    }\\n    //\\n    //\\n    //    function onSushiReward (uint256 pid, address _user, address to, uint256, uint256 lpToken) onlyMCV2 override external {\\n    //        PoolInfo memory pool = updatePool(pid);\\n    //        UserInfo storage user = userInfo[pid][_user];\\n    //        uint256 pending;\\n    //        if (user.amount > 0) {\\n    //            pending =\\n    //                (user.amount.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION).sub(\\n    //                    user.rewardDebt\\n    //                );\\n    //            rewardToken.safeTransfer(to, pending);\\n    //        }\\n    //        user.amount = lpToken;\\n    //        user.rewardDebt = lpToken.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION;\\n    //        emit LogOnReward(_user, pid, pending, to);\\n    //    }\\n    //\\n    //    function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {\\n    //        IERC20[] memory _rewardTokens = new IERC20[](1);\\n    //        _rewardTokens[0] = (rewardToken);\\n    //        uint256[] memory _rewardAmounts = new uint256[](1);\\n    //        _rewardAmounts[0] = pendingToken(pid, user);\\n    //        return (_rewardTokens, _rewardAmounts);\\n    //    }\\n    //\\n    //    /// @notice Sets the sushi per second to be distributed. Can only be called by the owner.\\n    //    /// @param _rewardPerSecond The amount of Sushi to be distributed per second.\\n    //    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\n    //        rewardPerSecond = _rewardPerSecond;\\n    //        emit LogRewardPerSecond(_rewardPerSecond);\\n    //    }\\n    //\\n    //    modifier onlyMCV2 {\\n    //        require(\\n    //            msg.sender == MASTERCHEF_V2,\\n    //            \\\"Only MCV2 can call this function.\\\"\\n    //        );\\n    //        _;\\n    //    }\\n    //\\n    //    /// @notice Returns the number of MCV2 pools.\\n    //    function poolLength() public view returns (uint256 pools) {\\n    //        pools = poolIds.length;\\n    //    }\\n    //\\n    //    /// @notice Add a new LP to the pool. Can only be called by the owner.\\n    //    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    //    /// @param allocPoint AP of the new pool.\\n    //    /// @param _pid Pid on MCV2\\n    //    function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\\n    //        require(poolInfo[_pid].lastRewardTime == 0, \\\"Pool already exists\\\");\\n    //        uint256 lastRewardTime = block.timestamp;\\n    //        totalAllocPoint = totalAllocPoint.add(allocPoint);\\n    //\\n    //        poolInfo[_pid] = PoolInfo({\\n    //            allocPoint: allocPoint.to64(),\\n    //            lastRewardTime: lastRewardTime.to64(),\\n    //            accSushiPerShare: 0\\n    //        });\\n    //        poolIds.push(_pid);\\n    //        emit LogPoolAddition(_pid, allocPoint);\\n    //    }\\n    //\\n    //    /// @notice Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner.\\n    //    /// @param _pid The index of the pool. See `poolInfo`.\\n    //    /// @param _allocPoint New AP of the pool.\\n    //    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\\n    //        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n    //        poolInfo[_pid].allocPoint = _allocPoint.to64();\\n    //        emit LogSetPool(_pid, _allocPoint);\\n    //    }\\n    //\\n    //    /// @notice View function to see pending Token\\n    //    /// @param _pid The index of the pool. See `poolInfo`.\\n    //    /// @param _user Address of user.\\n    //    /// @return pending SUSHI reward for a given user.\\n    //    function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {\\n    //        PoolInfo memory pool = poolInfo[_pid];\\n    //        UserInfo storage user = userInfo[_pid][_user];\\n    //        uint256 accSushiPerShare = pool.accSushiPerShare;\\n    //        uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(_pid).balanceOf(MASTERCHEF_V2);\\n    //        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\n    //            uint256 time = block.timestamp.sub(pool.lastRewardTime);\\n    //            uint256 sushiReward = time.mul(rewardPerSecond).mul(pool.allocPoint) / totalAllocPoint;\\n    //            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply);\\n    //        }\\n    //        pending = (user.amount.mul(accSushiPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n    //    }\\n    //\\n    //    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    //    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n    //    function massUpdatePools(uint256[] calldata pids) external {\\n    //        uint256 len = pids.length;\\n    //        for (uint256 i = 0; i < len; ++i) {\\n    //            updatePool(pids[i]);\\n    //        }\\n    //    }\\n    //\\n    //    /// @notice Update reward variables of the given pool.\\n    //    /// @param pid The index of the pool. See `poolInfo`.\\n    //    /// @return pool Returns the pool that was updated.\\n    //    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n    //        pool = poolInfo[pid];\\n    //        if (block.timestamp > pool.lastRewardTime) {\\n    //            uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(pid).balanceOf(MASTERCHEF_V2);\\n    //\\n    //            if (lpSupply > 0) {\\n    //                uint256 time = block.timestamp.sub(pool.lastRewardTime);\\n    //                uint256 sushiReward = time.mul(rewardPerSecond).mul(pool.allocPoint) / totalAllocPoint;\\n    //                pool.accSushiPerShare = pool.accSushiPerShare.add((sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128());\\n    //            }\\n    //            pool.lastRewardTime = block.timestamp.to64();\\n    //            poolInfo[pid] = pool;\\n    //            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accSushiPerShare);\\n    //        }\\n    //    }\\n    //\\n}\\n\"\n    },\n    \"contracts/mocks/ComplexRewarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//// SPDX-License-Identifier: MIT\\n//\\npragma solidity ^0.8.0;\\n//pragma experimental ABIEncoderV2;\\nimport \\\"../interfaces/IRewarder.sol\\\";\\n\\n//import \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\n//import \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\n//import \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\n\\n//import \\\"../MasterChefV2.sol.ref\\\";\\n//\\n///// @author @0xKeno\\n//contract ComplexRewarder is IRewarder, BoringOwnable {\\ncontract ComplexRewarder {\\n    //    using BoringMath for uint256;\\n    //    using BoringMath128 for uint128;\\n    //    using BoringERC20 for IERC20;\\n    //\\n    //    IERC20 private immutable rewardToken;\\n    //\\n    //    /// @notice Info of each MCV2 user.\\n    //    /// `amount` LP token amount the user has provided.\\n    //    /// `rewardDebt` The amount of SUSHI entitled to the user.\\n    //    struct UserInfo {\\n    //        uint256 amount;\\n    //        uint256 rewardDebt;\\n    //    }\\n    //\\n    //    /// @notice Info of each MCV2 pool.\\n    //    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    //    /// Also known as the amount of SUSHI to distribute per block.\\n    //    struct PoolInfo {\\n    //        uint128 accSushiPerShare;\\n    //        uint64 lastRewardBlock;\\n    //        uint64 allocPoint;\\n    //    }\\n    //\\n    //    /// @notice Info of each pool.\\n    //    mapping (uint256 => PoolInfo) public poolInfo;\\n    //\\n    //    uint256[] public poolIds;\\n    //\\n    //    /// @notice Info of each user that stakes LP tokens.\\n    //    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    //    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    //    uint256 totalAllocPoint;\\n    //\\n    //    uint256 public tokenPerBlock;\\n    //    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n    //\\n    //    address private immutable MASTERCHEF_V2;\\n    //\\n    //    event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    //    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\\n    //    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n    //    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n    //    event LogInit();\\n    //\\n    //    constructor (IERC20 _rewardToken, uint256 _tokenPerBlock, address _MASTERCHEF_V2) public {\\n    //        rewardToken = _rewardToken;\\n    //        tokenPerBlock = _tokenPerBlock;\\n    //        MASTERCHEF_V2 = _MASTERCHEF_V2;\\n    //    }\\n    //\\n    //\\n    //    function onSushiReward (uint256 pid, address _user, address to, uint256, uint256 lpToken) onlyMCV2 override external {\\n    //        PoolInfo memory pool = updatePool(pid);\\n    //        UserInfo storage user = userInfo[pid][_user];\\n    //        uint256 pending;\\n    //        if (user.amount > 0) {\\n    //            pending =\\n    //                (user.amount.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION).sub(\\n    //                    user.rewardDebt\\n    //                );\\n    //            rewardToken.safeTransfer(to, pending);\\n    //        }\\n    //        user.amount = lpToken;\\n    //        user.rewardDebt = lpToken.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION;\\n    //        emit LogOnReward(_user, pid, pending, to);\\n    //    }\\n    //\\n    //    function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {\\n    //        IERC20[] memory _rewardTokens = new IERC20[](1);\\n    //        _rewardTokens[0] = (rewardToken);\\n    //        uint256[] memory _rewardAmounts = new uint256[](1);\\n    //        _rewardAmounts[0] = pendingToken(pid, user);\\n    //        return (_rewardTokens, _rewardAmounts);\\n    //    }\\n    //\\n    //    modifier onlyMCV2 {\\n    //        require(\\n    //            msg.sender == MASTERCHEF_V2,\\n    //            \\\"Only MCV2 can call this function.\\\"\\n    //        );\\n    //        _;\\n    //    }\\n    //\\n    //    /// @notice Returns the number of MCV2 pools.\\n    //    function poolLength() public view returns (uint256 pools) {\\n    //        pools = poolIds.length;\\n    //    }\\n    //\\n    //    /// @notice Add a new LP to the pool.  Can only be called by the owner.\\n    //    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    //    /// @param allocPoint AP of the new pool.\\n    //    /// @param _pid Pid on MCV2\\n    //    function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\\n    //        require(poolInfo[_pid].lastRewardBlock == 0, \\\"Pool already exists\\\");\\n    //        uint256 lastRewardBlock = block.number;\\n    //        totalAllocPoint = totalAllocPoint.add(allocPoint);\\n    //\\n    //        poolInfo[_pid] = PoolInfo({\\n    //            allocPoint: allocPoint.to64(),\\n    //            lastRewardBlock: lastRewardBlock.to64(),\\n    //            accSushiPerShare: 0\\n    //        });\\n    //        poolIds.push(_pid);\\n    //        emit LogPoolAddition(_pid, allocPoint);\\n    //    }\\n    //\\n    //    /// @notice Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner.\\n    //    /// @param _pid The index of the pool. See `poolInfo`.\\n    //    /// @param _allocPoint New AP of the pool.\\n    //    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\\n    //        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n    //        poolInfo[_pid].allocPoint = _allocPoint.to64();\\n    //        emit LogSetPool(_pid, _allocPoint);\\n    //    }\\n    //\\n    //    /// @notice View function to see pending Token\\n    //    /// @param _pid The index of the pool. See `poolInfo`.\\n    //    /// @param _user Address of user.\\n    //    /// @return pending SUSHI reward for a given user.\\n    //    function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {\\n    //        PoolInfo memory pool = poolInfo[_pid];\\n    //        UserInfo storage user = userInfo[_pid][_user];\\n    //        uint256 accSushiPerShare = pool.accSushiPerShare;\\n    //        uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(_pid).balanceOf(MASTERCHEF_V2);\\n    //        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n    //            uint256 blocks = block.number.sub(pool.lastRewardBlock);\\n    //            uint256 sushiReward = blocks.mul(tokenPerBlock).mul(pool.allocPoint) / totalAllocPoint;\\n    //            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply);\\n    //        }\\n    //        pending = (user.amount.mul(accSushiPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n    //    }\\n    //\\n    //    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    //    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n    //    function massUpdatePools(uint256[] calldata pids) external {\\n    //        uint256 len = pids.length;\\n    //        for (uint256 i = 0; i < len; ++i) {\\n    //            updatePool(pids[i]);\\n    //        }\\n    //    }\\n    //\\n    //    /// @notice Update reward variables of the given pool.\\n    //    /// @param pid The index of the pool. See `poolInfo`.\\n    //    /// @return pool Returns the pool that was updated.\\n    //    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n    //        pool = poolInfo[pid];\\n    //        require(pool.lastRewardBlock != 0, \\\"Pool does not exist\\\");\\n    //        if (block.number > pool.lastRewardBlock) {\\n    //            uint256 lpSupply = MasterChefV2(MASTERCHEF_V2).lpToken(pid).balanceOf(MASTERCHEF_V2);\\n    //\\n    //            if (lpSupply > 0) {\\n    //                uint256 blocks = block.number.sub(pool.lastRewardBlock);\\n    //                uint256 sushiReward = blocks.mul(tokenPerBlock).mul(pool.allocPoint) / totalAllocPoint;\\n    //                pool.accSushiPerShare = pool.accSushiPerShare.add((sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128());\\n    //            }\\n    //            pool.lastRewardBlock = block.number.to64();\\n    //            poolInfo[pid] = pool;\\n    //            emit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\\n    //        }\\n    //    }\\n    //\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    },\n    \"libraries\": {\n      \"\": {\n        \"__CACHE_BREAKER__\": \"0x00000000d41867734bbee4c6863d9255b2b06ac1\"\n      }\n    }\n  }\n}",
      "solcInputHash": "dae072ca2bf11645e1d8125ee0e64832",
      "transactionHash": "0x271582d7be8f52b6b4785d2aacea0d4555f5e0422450bf27a69f63ca4b3d07d3",
      "args": [
        "0xEE67880A6aaBa39c5eAf833B68Ea5fd908dC008D",
        "0xD0DF68f0149C3e662Df772CF40cB63070591AD36",
        1637022623,
        "0xF3af4de70e1afb4E998BEa88177CdF31BDab5b69",
        1000000
      ]
    },
    "decoded": {
      "from": "0xD0DF68f0149C3e662Df772CF40cB63070591AD36",
      "gasPrice": "225000000000",
      "gasLimit": "4500000",
      "to": null,
      "value": "0",
      "nonce": 288,
      "data": "0x6101006040523480156200001257600080fd5b5060405162000eb938038062000eb9833981016040819052620000359162000202565b428311620000a55760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206260448201527165666f72652063757272656e742074696d6560701b60648201526084015b60405180910390fd5b6040516306ed78b760e21b8152600481018290526001600160a01b038087169190841690631bb5e2dc9060240160206040518083038186803b158015620000eb57600080fd5b505afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001269190620001db565b6001600160a01b031614620001925760405162461bcd60e51b815260206004820152602b60248201527f50726f766964656420706f6f6c4964206e6f7420656c696769626c6520666f7260448201526a103a3434b9903a37b5b2b760a91b60648201526084016200009c565b606094851b6001600160601b03199081166080529390941b90921660a05260c052600080546001600160a01b0319166001600160a01b0390921691909117905560e05262000283565b600060208284031215620001ee57600080fd5b8151620001fb816200026a565b9392505050565b600080600080600060a086880312156200021b57600080fd5b855162000228816200026a565b60208701519095506200023b816200026a565b60408701516060880151919550935062000255816200026a565b80925050608086015190509295509295909350565b6001600160a01b03811681146200028057600080fd5b50565b60805160601c60a05160601c60c05160e051610b9d6200031c6000396000818160cd015281816101750152818161039a0152818161053901526105e2015260008181610118015261049701526000818160840152818161019601528181610604015261076301526000818161013e015281816102230152818161026b015281816103bc0152818161069101526107410152610b9d6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636e29a56b1161005b5780636e29a56b146100fb57806386d1a69f1461010e578063b91d400114610116578063fc0c546a1461013c57600080fd5b806338af3eed146100825780634641257d146100c15780636b4788a9146100cb575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100c9610162565b005b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016100b8565b6100c9610109366004610a96565b610216565b6100c9610495565b7f00000000000000000000000000000000000000000000000000000000000000006100ed565b7f00000000000000000000000000000000000000000000000000000000000000006100a4565b6000546001600160a01b03166318fccc767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b50505050565b61024b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461078d565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156102b957600080fd5b505afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f19190610aaf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610a74565b506000546040516370a0823160e01b81523060048201526001600160a01b0391821691638dbdbe6d917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610aaf565b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152606401600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000004210156105255760405162461bcd60e51b815260206004820152603260248201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260448201527165666f72652072656c656173652074696d6560701b60648201526084015b60405180910390fd5b60008054604080516393f1a40b60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152306024820152815184936001600160a01b0316926393f1a40b9260448082019391829003018186803b15801561059257600080fd5b505afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610ac8565b60005491935091506001600160a01b031663d1abb9077f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006040516001600160e01b031960e086901b168152600481019390935260248301919091526001600160a01b03166044820152606401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505060006106b37f000000000000000000000000000000000000000000000000000000000000000090565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190610aaf565b90508015610788576107886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836107f8565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610828565b6040516001600160a01b03831660248201526044810182905261078890849063a9059cbb60e01b906064016107c1565b600061087d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108fa9092919063ffffffff16565b805190915015610788578080602001905181019061089b9190610a74565b6107885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051c565b60606109098484600085610913565b90505b9392505050565b6060824710156109745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051c565b843b6109c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051c565b600080866001600160a01b031685876040516109de9190610aec565b60006040518083038185875af1925050503d8060008114610a1b576040519150601f19603f3d011682016040523d82523d6000602084013e610a20565b606091505b5091509150610a30828286610a3b565b979650505050505050565b60608315610a4a57508161090c565b825115610a5a5782518084602001fd5b8160405162461bcd60e51b815260040161051c9190610b08565b600060208284031215610a8657600080fd5b8151801515811461090c57600080fd5b600060208284031215610aa857600080fd5b5035919050565b600060208284031215610ac157600080fd5b5051919050565b60008060408385031215610adb57600080fd5b505080516020909101519092909150565b60008251610afe818460208701610b3b565b9190910192915050565b6020815260008251806020840152610b27816040850160208701610b3b565b601f01601f19169190910160400192915050565b60005b83811015610b56578181015183820152602001610b3e565b83811115610210575050600091015256fea26469706673582212200d37a172cac16c4ceb7241cf570216ec19b842dddd059b96324bb33b8a1ad9cf64736f6c63430008070033000000000000000000000000ee67880a6aaba39c5eaf833b68ea5fd908dc008d000000000000000000000000d0df68f0149c3e662df772cf40cb63070591ad36000000000000000000000000000000000000000000000000000000006192fb9f000000000000000000000000f3af4de70e1afb4e998bea88177cdf31bdab5b6900000000000000000000000000000000000000000000000000000000000f4240",
      "r": "0x5a95e513a1e7df142ff7703d9493470c84b6f6a9e008fe93d2160f1938a1daf1",
      "s": "0x71f26e94f24ebc669fb2119de6a50327e0cfc4742e99d12107ed4d28878b1b48",
      "v": 86262,
      "chainId": 43113
    }
  }
}